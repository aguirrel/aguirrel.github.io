/************************************************************************/
/*									*/
/* vinculo.pc	    : Funcion SQL para verificar si hay vinculo         */
/*		      entre un nodo y una sucursal.			*/
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 10/07/96						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/************************************************************************/

#include <time.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN       20
#define PASSWD_LEN       20
#define NRO_CAJ_SF_LEN   3
#define NRO_CA_LEN       2
#define CAN_TRX_LEN      5
#define HR_CONTROL_LEN   11

#define varcpy(X,Y)		{ strncpy(X.arr,Y , sizeof(X.arr));  \
				  X.len=(sizeof(X.arr) < strlen(Y) ? \
				       sizeof(X.arr) : strlen(Y)); }

#define varcpy2(X,Y)		{ strncpy(X, Y.arr, Y.len);\
				  X[Y.len]=0; }

extern int	SqlErrno;
typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;

typedef struct
{
    char	nro_caj_sf[NRO_CAJ_SF_LEN+1];
    char	nro_ca[NRO_CA_LEN+1];
    char	can_trx[CAN_TRX_LEN+1];
    char	Hr_control[HR_CONTROL_LEN+1];
} str_control_trx;

int open_db(str_login *data);
void init();
long buscar(long NroCa, long NroCajSf, str_control_trx *ctrl);
void getFechaActual(char *fecha);

EXEC SQL INCLUDE SQLCA;

long              lcont;
long              lnro_caj_sf;
long              lnro_ca;
long              lnro_ca2;
char              sznro_ca[3];
long              ret;
long              dif;
int               SqlErrno;
char              fec[11];
char              aux[11];
str_control_trx   ctrl_trx;


EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     nro_ca[2];
EXEC SQL END DECLARE SECTION;


int open_db(str_login *data)
{
int SqlErrno;

    strcpy(userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy(passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;

    if (sqlca.sqlcode!=OK)
       {
       SqlErrno=sqlca.sqlcode;
       printf("Error al conectarse a la Base de Datos\n");
       return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}

long buscar(long NroCa, long NroCajSf, str_control_trx *ctrl)
{
/* buscar : 
 se busca el registro recuperado por el cursor en la tabla control_trx 
 devuelve 0 si se encontro  */

   EXEC SQL 
       SELECT nro_caj_sf, nro_ca, can_trx, Hr_control
       INTO :ctrl->nro_caj_sf, :ctrl->nro_ca, :ctrl->can_trx, :ctrl->Hr_control
       FROM control_trx
       WHERE nro_ca = :NroCa
             AND nro_caj_sf = :NroCajSf;

   return sqlca.sqlcode;
} 

void getFechaActual(char *fecha)
{
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d%02d%02d%02d%02d", newtime->tm_mday, 
	newtime->tm_mon+1, newtime->tm_hour, newtime->tm_min, 
	newtime->tm_sec);
}

int VeriFech()
{
   EXEC SQL
     DELETE FROM control_trx
        WHERE TO_CHAR(fec_ctrl,'YYYYMMDD')!=TO_CHAR(SYSDATE,'YYYYMMDD');

   EXEC SQL
     COMMIT;

    return OK;
}

int main(int argc, char *argv[])
{
int todos=0;

     

    if (argc==2)
       {
       strcpy(sznro_ca, argv[1]);
       lnro_ca2 = atoi(sznro_ca);
       }
    else if (argc==1)
            {
            lnro_ca2 = -1;
            todos=1;
            }
 
    init();
    getFechaActual(fec);

    VeriFech();

    EXEC SQL 
        DECLARE c1 CURSOR FOR 
            SELECT T.nro_caj_sf,
                   T.nro_ca,
                   count(*)
                   FROM cred_trx T 
                   WHERE TO_CHAR(TO_DATE(substr(fec_loc,1,4),'MMDD'),'YYMMDD') = TO_CHAR(SYSDATE,'YYMMDD') 
                   GROUP BY T.nro_caj_sf, T.nro_ca
                   ORDER BY T.nro_caj_sf, T.nro_ca;
       
     EXEC SQL 
         OPEN c1;

     EXEC SQL 
         FETCH c1
            INTO :lnro_caj_sf, :lnro_ca, :lcont;
     
printf("\n\tNro CA   Nro Suc        Anterior             Actual         dif\n");
  printf("\t                      Hora    Q trx       Hora    Q trx        \n");
  printf("\t------   -------      ----    -----       ----    -----     ---\n");
  while (sqlca.sqlcode==0)    
    {

     if ((lnro_ca==lnro_ca2) || (todos))
        {

        printf("\t%6ld", lnro_ca);
        printf("%10ld", lnro_caj_sf);

        ret = buscar(lnro_ca, lnro_caj_sf, &ctrl_trx);  
        
        if (ret == 1403)
            {

            printf("      ----");
            printf("    -----");
            printf("%12s", fec+4);
            printf("%8ld", lcont);
            printf("     ---\n");
    
            EXEC SQL 
             INSERT INTO control_trx 
                      (nro_caj_sf, nro_ca, can_trx, Hr_control,fec_ctrl)
               VALUES (:lnro_caj_sf, :lnro_ca, :lcont, :fec, sysdate);
           
            EXEC SQL
                COMMIT;

            if (sqlca.sqlcode!=0)
                {
                SqlErrno = sqlca.sqlcode;
                printf("\n\tError en INSERT tabla CONTROL_TRX \n");
                return NOOK;
                }

            } /* fin del if */
        
        if (ret == 0)
            {  
            strcpy(aux,ctrl_trx.Hr_control);
            printf("%12s", aux+4);
            printf("%10s", ctrl_trx.can_trx);
            printf("%9s", fec+4);
            printf("%8ld", lcont);
         
            dif = lcont - atol(ctrl_trx.can_trx); 
            printf("%8ld\n", dif);

               EXEC SQL 
                   UPDATE control_trx
                      SET nro_caj_sf = :ctrl_trx.nro_caj_sf,
                          nro_ca = :ctrl_trx.nro_ca,
                          can_trx = :lcont,
                          Hr_control = :fec
                      WHERE nro_ca = :lnro_ca
                            and nro_caj_sf = :lnro_caj_sf;

               if (sqlca.sqlcode!=0)
                  {
                  SqlErrno = sqlca.sqlcode;
                  return NOOK;
                  }
            
               EXEC SQL
                   COMMIT;

            } /* fin del if ret == 0  */

        } /* Fin del if */

        EXEC SQL 
            FETCH c1
               INTO :lnro_caj_sf, :lnro_ca, :lcont;

    } /* Fin del while ppal. */

    printf("\n");
    
    EXEC SQL
        CLOSE c1;
}
