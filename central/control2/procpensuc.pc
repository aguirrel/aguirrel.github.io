/************************************************************************/
/*									*/
/* procpensuc.pc    : Funcion para pasar las trxs del pending.out	*/
/*		      a la tabla de credito cred_trx.            	*/
/*                    Procesa la sucursal que le indicamos              */
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 22/05/97						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
 
#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN   20
#define PASSWD_LEN   20

extern int	SqlErrno;

struct trx 
{
char nro_caj[6];
char nro_trx[5];
char tip_tar[10];
char cod_tar[3];
char nro_tar[21];
char cod_aut[9];
char monto[15];
char fecha[7];
char cod_resoluc[3];
char fec_vtacard[5];
};

struct trx TrxRead;


typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;
     

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     nro_suc[3];
    VARCHAR     nro_caj[5];
    VARCHAR     nro_trx[4];
    VARCHAR     mod_env[2];
    VARCHAR     cod_tar[2];
    VARCHAR     nro_ca[2];
    VARCHAR     cod_trx[2];
    VARCHAR     cod_est[2];
    VARCHAR     can_ret[4];
    VARCHAR     nro_lot[3];
    VARCHAR     cod_pro[6];
    VARCHAR     monto[12];
    VARCHAR     nro_tar[20];
    VARCHAR     nro_trc[6];
    VARCHAR     fec_loc[10];
    VARCHAR     fec_ven[4]; 
    VARCHAR     mod_ing[3];
    VARCHAR     nro_tic[4]; 
    VARCHAR     nro_caj_sf[5]; 
    VARCHAR     nro_caj_fic[5]; 
    VARCHAR     cod_aut[6]; 
    VARCHAR     fec_vtacard[4]; 
     
EXEC SQL END DECLARE SECTION;


void getFechaActual(char *fecha)
{
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d%02d%02d", newtime->tm_hour,
	           newtime->tm_min, newtime->tm_sec);
}

int open_db(str_login *data)
{
int SqlErrno;

    strcpy((char *)userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy((char *)passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
       {
	  SqlErrno=sqlca.sqlcode;
	  return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}


void main (int argc, char *argv[])
{
char buffer[256];
FILE *fd;
FILE *fdfec;
FILE *salida;
int  procesa;
char suc[6];
char szfecha[5];
char fec[23];
double aux;
double aux2;
char szmonto[13];
char filename[100];
char filelog[100];
char szfec_loc[11];
char sznro_trc[7];
int lnro_trc;
char nro_tar_aux[16];
time_t hIni;


  if (argc!=2)
  {
     printf("\n\tUso: %s <XXX>, donde:\n", argv[0]);
     printf("\n\tXXX es el numero de sucursal\n");
     exit(0);
  }

  init();

  printf("Apertura de archivo fecha.dat\n");
  if ((fdfec=fopen("/online/log/fecha.dat", "r"))==NULL)
      {
        printf("\nError: Apertura de archivo fecha.dat\n");
        fprintf(salida, "\nError: Apertura de archivo fecha.dat\n");
        exit(1);
      }

  fscanf(fdfec, "%s", szfecha);
  printf("Fecha leida de fecha.dat: [%s]\n", szfecha);

  strcpy(filelog, "/online/log/procpen.");
  strcat(filelog, szfecha);

  printf("Apertura de archivo de log [%s]\n", filelog);
  if ((salida=fopen(filelog, "a"))==NULL)
      {
        printf("\nError: Apertura de archivo [%s]\n", filelog);
        fprintf(salida, "\nError: Apertura de archivo [%s]\n", filelog);
        exit(1);
      }

  hIni=time(&hIni);
  fprintf(salida, "Comienza proceso PROCPENSUC %s",
                  asctime(localtime(&hIni)));

  strcpy(suc, "00");
  strcat(suc, argv[1]);
  strcpy((char *)nro_caj_sf.arr, suc);
  nro_caj_sf.len=strlen((char *)nro_caj_sf.arr);

  EXEC SQL
      SELECT nro_ca, nro_caj_fic
      INTO :nro_ca, :nro_caj_fic
      FROM cred_suc
      WHERE nro_caj_sf=:nro_caj_sf AND
            tip_cie=1;


    fprintf(salida, "\nProcesando sucursal: [%s] CA: [%s]\n", 
                    nro_caj_sf.arr, nro_ca.arr);
    printf("Procesando sucursal: [%s] CA: [%s]\n", 
                    nro_caj_sf.arr, nro_ca.arr);

    strncpy(suc, (char *)nro_caj_sf.arr, 5);
    suc[5]='\0';
 
    printf("sucursal a procesar: [%s]\n", suc);

    strcpy(filename, "/online/chec/suc");
    strncat(filename, &suc[3], 2);
    strcat(filename, "/pending.");
    strcat(filename, szfecha);

    procesa=1;
   
    printf("Apertura de archivo: [%s]\n", filename);
    if ((fd=fopen(filename, "r"))==NULL)
        {
          printf("Error: Apertura de archivo: [%s]\n", filename);
          fprintf(salida, "Error: Apertura de archivo: [%s]\n", filename);
          procesa=0;
        }

    while((fgets(buffer,sizeof(buffer),fd)!=NULL) && procesa)
    {

       strncpy(TrxRead.nro_caj, buffer, 5);
       strncpy(TrxRead.nro_trx, &buffer[5], 4);
       strncpy(TrxRead.cod_tar, &buffer[9], 2);
       strncpy(TrxRead.nro_tar, &buffer[11], 20);
       strncpy(TrxRead.cod_aut, &buffer[31], 8);
       strncpy(TrxRead.monto, &buffer[39], 14);
       strncpy(TrxRead.fecha, &buffer[53], 6);
       strncpy(TrxRead.cod_resoluc, &buffer[59], 2);
       strncpy(TrxRead.fec_vtacard, &buffer[61], 4);


/*       printf("%2s %7s %11s %19s %12s %11s %4s\n",
		 TrxRead.cod_tar,
		 TrxRead.nro_trx,
	         TrxRead.nro_caj,
		 TrxRead.nro_tar,
		 TrxRead.cod_aut,
                 TrxRead.fecha,
                 TrxRead.fec_vtacard);   */


       strcpy((char *)cod_tar.arr, TrxRead.cod_tar);
       cod_tar.len=strlen(TrxRead.cod_tar);

       EXEC SQL
           SELECT nro_ca
           INTO :nro_ca
           FROM cred_tarj
           WHERE cod_tar=:cod_tar;

       strcpy((char *)nro_suc.arr, "001");
       nro_suc.len=strlen((char *)nro_suc.arr);

       strcpy((char *)nro_caj.arr, (char *)nro_caj_fic.arr);
       nro_caj.len=strlen((char *)nro_caj_fic.arr);   

       strcpy((char *)nro_trx.arr, TrxRead.nro_trx);
       nro_trx.len=strlen(TrxRead.nro_trx);

       strcpy((char *)mod_env.arr, "01");
       mod_env.len=strlen((char *)mod_env.arr);
  
       strcpy((char *)cod_trx.arr, TrxRead.cod_resoluc);
       cod_trx.len=strlen(TrxRead.cod_resoluc);

/* Pongo codigo de estado 43 para no enviar a CA hasta la confirmacion */

       strcpy((char *)cod_est.arr, "43");
       cod_est.len=strlen((char *)cod_est.arr);

       strcpy((char *)can_ret.arr, "0000");
       can_ret.len=strlen((char *)can_ret.arr);


/* Obtiene el numero de lote de la terminal ficticia de la sucursal 
   correspondiente */

       EXEC SQL
           SELECT nro_lot
           INTO :nro_lot
           FROM cred_term
           WHERE nro_caj_sf=:nro_caj_sf;

/*       printf("Nro de lote a insertar: [%s]\n", nro_lot.arr);  */

       strcpy((char *)cod_pro.arr, "000000");
       cod_pro.len=strlen((char *)cod_pro.arr);

       aux=atof(TrxRead.monto);
       aux2=aux*100;
       memset(szmonto, 0, sizeof(szmonto));
       sprintf(szmonto, "%.2f", aux2);

       strcpy((char *)monto.arr, szmonto);
       monto.len=strlen(szmonto);

       strcpy(nro_tar_aux, &TrxRead.nro_tar[4]); 
       nro_tar_aux[16]='\0';
       strcpy((char *)nro_tar.arr, nro_tar_aux);
       nro_tar.len=strlen(nro_tar_aux);

       printf("Nro de tarjeta: %s\n", nro_tar_aux);

/****************************************************************************/
/* Modificacion: 30/10/1997
   Autor: Denise Lucien
   Objetivo: Para Visa la fecha de caducidad debe ser "1111"                */
/****************************************************************************/

       if (strcmp((char *)cod_tar.arr,"02")==0)
       {
          strcpy((char *)fec_ven.arr, "1111");
       }
       else 
       {
          strcpy((char *)fec_ven.arr, "9912");
       }
       fec_ven.len=strlen((char *)fec_ven.arr);

       strcpy((char *)mod_ing.arr, "012");
       mod_ing.len=strlen((char *)mod_ing.arr);

       strcpy((char *)nro_tic.arr, TrxRead.nro_trx);
       nro_tic.len=strlen(TrxRead.nro_trx);

       strcpy((char *)fec_vtacard.arr, TrxRead.fec_vtacard);
       fec_vtacard.len=strlen(TrxRead.fec_vtacard);

/* Obtengo el numero de trace actual  */

       EXEC SQL
           SELECT nro_trc
           INTO :nro_trc
           FROM cred_term
           WHERE nro_caj=:nro_caj and 
                 nro_ca=:nro_ca;

       printf("Obteniendo nro de trace. sqlcode: %ld\n", sqlca.sqlcode);
       printf("nro de trace anterior: [%s]\n", nro_trc.arr);

       lnro_trc=atoi((char *)nro_trc.arr);
       lnro_trc++;
       sprintf(sznro_trc, "%d", lnro_trc);
       printf("voy a insertar con [%s]\n", sznro_trc);
       
       strcpy((char *)nro_trc.arr, sznro_trc);
       nro_trc.len=strlen((char *)nro_trc.arr);		


/* Procesamiento del cod de autorizacion y de la fecha local
   Codigo de autorizacion. Pueden darse tres casos:
   1) 99 y la hora
   2) Provisto por Posnet
   3) todos ceros  */ 


       memset(fec, 0, sizeof(fec));
       getFechaActual(fec);
       printf("fecha actual: [%s]\n", fec);

       strcpy((char *)szfec_loc, TrxRead.fecha);

       if (!strncmp(&TrxRead.cod_aut[2], "99", 2))
       {
          strcpy((char *)cod_aut.arr, "000000");
          cod_aut.len=strlen((char *)cod_aut.arr);
          strcat((char *)szfec_loc, &TrxRead.cod_aut[4]);
          strcat((char *)szfec_loc, "00");
       }
       else if (!strncmp(TrxRead.cod_aut, "00000000", 8))
            {
               strcpy((char *)cod_aut.arr, "000000");
               cod_aut.len=strlen((char *)cod_aut.arr);
               strncat((char *)szfec_loc, fec, 6);
            }
            else
            {
               strcpy((char *)cod_aut.arr, &TrxRead.cod_aut[2]);
               cod_aut.len=strlen((char *)cod_aut.arr);
               strncat((char *)szfec_loc, fec, 6);
            }

       strcpy((char *)fec_loc.arr, &szfec_loc[2]);
       fec_loc.len=strlen(&szfec_loc[2]);


/*       printf("voy a insertar con nro_suc [%s]\n", nro_suc.arr); 
       printf("voy a insertar con nro_caj [%s]\n", nro_caj.arr);  
       printf("voy a insertar con nro_trx [%s]\n", nro_trx.arr); 
       printf("voy a insertar con mod_env [%s]\n", mod_env.arr);
       printf("voy a insertar con cod_tar [%s]\n", cod_tar.arr);
       printf("voy a insertar con nro_ca [%s]\n", nro_ca.arr);
       printf("voy a insertar con cod_trx [%s]\n", cod_trx.arr);
       printf("voy a insertar con cod_est [%s]\n", cod_est.arr);
       printf("voy a insertar con can_ret [%s]\n", can_ret.arr);
       printf("voy a insertar con nro_lot [%s]\n", nro_lot.arr);
       printf("voy a insertar con cod_pro [%s]\n", cod_pro.arr);
       printf("voy a insertar con monto [%s]\n", monto.arr);
       printf("voy a insertar con nro_tar [%s]\n", nro_tar.arr);
       printf("voy a insertar con fec_loc [%s]\n", fec_loc.arr);
       printf("voy a insertar con fec_ven [%s]\n", fec_ven.arr);
       printf("voy a insertar con mod_ing [%s]\n", mod_ing.arr);
       printf("voy a insertar con nro_tic [%s]\n", nro_tic.arr);
       printf("voy a insertar con cod_aut [%s]\n", cod_aut.arr);    
       printf("voy a insertar con fec_vtacard [%s]\n", fec_vtacard.arr);    */


       fprintf(salida, "procpen: primary key: \n");
       fprintf(salida, "procpen: nro_suc [%s] nro_caj [%s] nro_trx [%s] "
                       "mod_env [%s] nro_tar [%s]\n",
                       nro_suc.arr, nro_caj.arr, nro_trx.arr, 
                       mod_env.arr, nro_tar.arr);

       EXEC SQL
           INSERT
              INTO cred_trx (NRO_SUC, 
                             NRO_CAJ, 
                             NRO_TRX, 
                             MOD_ENV, 
                             COD_TAR,
                             NRO_CA,
                             COD_TRX,
                             COD_EST,
                             CAN_RET,
                             NRO_LOT,
                             COD_PRO,
                             MONTO,
                             NRO_TAR,
                             FEC_LOC,
                             FEC_VEN,
                             MOD_ING,
                             NRO_TIC,
                             COD_AUT,
                             FEC_VTACARD)

              VALUES (:nro_suc, 
                      :nro_caj, 
                      :nro_trx, 
                      :mod_env, 
                      :cod_tar,
                      :nro_ca,
                      :cod_trx,
                      :cod_est,
                      :can_ret,
                      :nro_lot,
                      :cod_pro,
                      :monto, 
                      :nro_tar,
                      :fec_loc,
                      :fec_ven,
                      :mod_ing,
                      :nro_trx,
                      :cod_aut,
                      :fec_vtacard);    

       printf("sqlcode: %ld\n", sqlca.sqlcode);

       if (sqlca.sqlcode==0)
       {
          fprintf(salida, "procpen: trx agregada en cred_trx\n");

          /* Actualizo nro de trace en tabla cred_term */

          fprintf(salida, "procpen: actualizo trace en tabla cred_term\n");
          EXEC SQL
              UPDATE cred_term
              SET nro_trc=:nro_trc
              WHERE nro_caj=:nro_caj and
                    nro_ca=:nro_ca;

          EXEC SQL
              COMMIT;

       }
       else
       {
          fprintf(salida, "procpen: error en insert tabla cred_trx %ld\n", 
                  sqlca.sqlcode);
          printf("procpen: error en insert tabla cred_trx %ld\n", 
                  sqlca.sqlcode);
       }

    } /* Fin del while de archivo pending */

    fclose(fd);


  hIni=time(&hIni);
  fprintf(salida, "\nProceso finalizado %s\n",
                  asctime(localtime(&hIni)));

}
