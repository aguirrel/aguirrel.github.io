/************************************************************************/
/*									*/
/* pendBack.pc	    : Funcion para consultar las trxs pendientes        */
/*		      de envio del BackSend.                     	*/
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 14/07/97						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif
 
#define USERID_LEN   20
#define PASSWD_LEN   20

extern int	SqlErrno;

typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;
     
EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR	CTIPPAGO[2];
    VARCHAR	CTIPTARJ[2];
    VARCHAR	CTARJDOC[20];
    VARCHAR	ITARJDOC[12];
    VARCHAR	CSITSEND[4];
    VARCHAR	CTERMINL[4];
    VARCHAR	CCODFUNC[2];
    VARCHAR	CSITTADO[2];
    VARCHAR	CRESOLUC[8];
    VARCHAR	FCTRENTR[6];
    VARCHAR	HCTRENTR[4];

    VARCHAR	NCTRTERM[4];
    VARCHAR	NCTROPER[4];
    VARCHAR	FVENCIMI[4];
    VARCHAR	CCENINGE[4];
    VARCHAR	CEDIFICI[4];
    VARCHAR	CZONAVEN[4];
    VARCHAR	CPLANFIS[4];
    VARCHAR	NCTRTRAN[4];
    long	cont;
    short       null1;

EXEC SQL END DECLARE SECTION;

void getFechaActual(char *fecha)
{
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d/%02d/%02d", newtime->tm_mday, 
	           newtime->tm_mon+1, newtime->tm_year);
}


int open_db(str_login *data)
{
int SqlErrno;

    strcpy((char *)userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy((char *)passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
       {
	  SqlErrno=sqlca.sqlcode;
	  return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}



void main (int argc, char *argv[])
{
int   aux;

   init();


   if (argc!=2)
   {
      printf("Uso: %s <ALL | c >\n", argv[0]);
      exit(1);
   }

   if (!strcmp(argv[1], "c"))
   {
      EXEC SQL 
          SELECT COUNT(*)
          INTO :cont
          FROM T6041500
          WHERE MOD (CSITTADO, 2) = 1 
                AND   CTIPPAGO IN ('01', '02')
                AND   ( CSITSEND <> '03' OR CSITSEND IS NULL );

      printf("sqlcode: %d\n", sqlca.sqlcode);

      printf("Pendientes: %d\n", cont);


      EXEC SQL 
          SELECT COUNT(*)
          INTO :cont
          FROM T6041500
          WHERE MOD (CSITTADO, 2) = 1 
                AND   CTIPPAGO IN ('01', '02')
                AND   CSITSEND = '03';

      printf("sqlcode: %d\n", sqlca.sqlcode);

      printf("Enviadas: %d\n", cont);

   }
   else
   {


   EXEC SQL 
   DECLARE c1 CURSOR FOR
   SELECT  CTIPPAGO, CTIPTARJ, 
           LTRIM( CTARJDOC, '0'),
           CSITTADO, CRESOLUC, 
           TO_CHAR(ITARJDOC * 100, '099999999999'),
           CSITSEND,
           T6041500.CTERMINL, 
           CCODFUNC, TO_CHAR(FCTRENTR, 'YYMMDD'), HCTRENTR
           FROM  T6041500,T6040900
           WHERE T6041500.CTERMINL = T6040900.CTERMINL
                 AND   T6041500.NCTRTERM = T6040900.NCTRTERM
                 AND   MOD (CSITTADO, 2) = 1 
                 AND   CTIPPAGO IN ('01', '02')
                 AND   ( CSITSEND <> '03' OR CSITSEND IS NULL );    

   EXEC SQL
       OPEN c1;

   EXEC SQL
       FETCH c1
       INTO :CTIPPAGO, :CTIPTARJ, :CTARJDOC, :CSITTADO, :CRESOLUC, 
            :ITARJDOC, :CSITSEND:null1, :CTERMINL, :CCODFUNC, 
            :FCTRENTR, :HCTRENTR;

   printf("Trx pendientes de envio:\n\n");

   while (sqlca.sqlcode==0)
   {
       printf("%s %s %s %s %s %s %s %s %s %s %s\n", 
              CTIPPAGO.arr, CTIPTARJ.arr, CTARJDOC.arr, CSITTADO.arr, 
              CRESOLUC.arr, ITARJDOC.arr, CSITSEND.arr, CTERMINL.arr, 
              CCODFUNC.arr, FCTRENTR.arr, HCTRENTR.arr);

       EXEC SQL
           FETCH c1
           INTO :CTIPPAGO, :CTIPTARJ, :CTARJDOC, :CSITTADO, :CRESOLUC, 
                :ITARJDOC, :CSITSEND:null1, :CTERMINL, :CCODFUNC, 
                :FCTRENTR, :HCTRENTR;

   }
 
   EXEC SQL
       CLOSE c1;

   }
 
}
