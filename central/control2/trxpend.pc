#ifdef OS_Linux
#pragma pack(1)
#endif

/*
+------------------------------------------------------------------------------+
|           COTO - PLATAFORMAS SECTORIALES - DESARROLLO DISTRIBUCION           |
|              Copyright (C) 2003 - COTO CICSA                                 |
+-----------------+------------------------------------------------------------+
| FUENTE          | trxpend.pc                                                 |
|                 |                                                            |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Funcion para calcular la cantidad de transacciones         |
|                 | pendientes                                                 |
+-----------------+------------------------------------------------------------+
*/
#define OK    0
#define NOOK  -1

extern int	SqlErrno;

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR		userid[20];
    VARCHAR     descrip[30];
    VARCHAR     nro_ca[2];
	VARCHAR     cod_est[2];
EXEC SQL END DECLARE SECTION;

/*
+-----------------+------------------------------------------------------------+
| FUENTE          | open_db                                                    |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Funcion de conexion a la base de datos                     |
|                 |                                                            | 
+-----------------+------------------------------------------------------------+
*/
int open_db()
{
	int SqlErrno;

    strcpy(userid.arr, "/");
    userid.len=strlen(userid.arr);

    EXEC SQL
		CONNECT :userid;
    
	if (sqlca.sqlcode!=OK)
    {
		SqlErrno=sqlca.sqlcode;
        printf("Error al conectarse a la Base de Datos\n");
		return NOOK;
    }
    SqlErrno=OK;
    return OK;
}
/*
+-----------------+------------------------------------------------------------+
| FUENTE          | open_db                                                    |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Funcion principal de la aplicacion                         |
|                 |                                                            | 
+-----------------+------------------------------------------------------------+
*/
void main()
{
	int cont;
	int pasadas;
	char estado[15];

    open_db(); 

    EXEC SQL
        DECLARE cursor_ca CURSOR FOR
           SELECT nro_ca, descrip
           FROM cred_cas;
        
    EXEC SQL
        OPEN cursor_ca;

    EXEC SQL 
        FETCH cursor_ca
        INTO :nro_ca, :descrip;

    while (sqlca.sqlcode==0)
    {
		pasadas=1;

		while (pasadas<=3)
		{
			if (pasadas==1)
			{
				strcpy(cod_est.arr,"00"); 
				cod_est.len=strlen(cod_est.arr);
				strcpy(estado,"Pendientes    ");
			}

			if (pasadas==2)
			{
				strcpy(cod_est.arr,"01"); 
				cod_est.len=strlen(cod_est.arr);
				strcpy(estado,"Esperando Rta.");
			}

			if (pasadas==3)
			{
				strcpy(cod_est.arr,"06"); 
				cod_est.len=strlen(cod_est.arr);
				strcpy(estado,"Reversos      ");
			}
   
			pasadas++; 

			EXEC SQL
				SELECT count(*)
				INTO :cont
				FROM cred_trx
				WHERE nro_ca=:nro_ca AND
					  cod_est=:cod_est;

			printf("\tCA  %.15s Trx %.15s %d\n", descrip.arr,estado, cont);
		}
	
		strcpy(cod_est.arr,"20"); 
		cod_est.len=strlen(cod_est.arr);

		EXEC SQL
			SELECT count(*) 
			INTO :cont
			FROM cred_anul_trx
			WHERE nro_ca=:nro_ca  AND
			 cod_est=:cod_est;

		printf("\tCA  %.15s Anulaciones Pend.  %d\n",descrip.arr,cont);

		strcpy(cod_est.arr,"06"); 
		cod_est.len=strlen(cod_est.arr);

		EXEC SQL
			SELECT count(*)
			INTO :cont
			FROM cred_rev_anul_trx
			WHERE nro_ca=:nro_ca AND
				  cod_est=:cod_est;

		printf("\tCA  %.15s Rev. de Anulacion  %d\n",descrip.arr,cont);

		EXEC SQL 
			FETCH cursor_ca
			INTO :nro_ca, :descrip;

		printf("\n");
    }

	EXEC SQL
		CLOSE cursor_ca;
}
