/************************************************************************/
/*									*/
/* trxpendplus.pc   : Funcion para calcular la cantidad de 		*/
/*		      transacciones pendientes.	               		*/
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 10/07/96						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/* Cambios          : 13/07/98: una vez ejecutado se va actualizando    */
/*                               Andres Manggini.                       */
/*                                                                      */
/************************************************************************/

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN   20
#define PASSWD_LEN   20

extern int	SqlErrno;

typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     descrip[30];
    VARCHAR     nro_ca[2];
    VARCHAR     cod_est[2];

EXEC SQL END DECLARE SECTION;


int open_db(str_login *data)
{
int SqlErrno;

    strcpy(userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy(passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
    {
	SqlErrno=sqlca.sqlcode;
        printf("Error al conectarse a la Base de Datos\n");
	return NOOK;
    }
    SqlErrno=OK;
    return OK;
}

int init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    return open_db(&login_data);
}

void main (int argc, char *argv[])
{
int iSleep;
int cont;
int pasadas;
char estado[15];

    init();

 	 
    if ( argc == 2 )
    	iSleep = atoi( argv[1] );
    else
    {        
	printf("\nUso: %s n (donde n es la cantidad de segundos entre actualizaciones).\n\n", argv[0]);
	printf("Presione una tecla para continuar con un intervalo de 1 segundo...\n");
	getchar();	
	iSleep = 1;
    }

    EXEC SQL
        DECLARE cursor_ca CURSOR FOR
           SELECT nro_ca, descrip
           FROM cred_cas;
        
    system("clear");
    while( 1 )
    {
	    EXEC SQL
        	OPEN cursor_ca;

	    EXEC SQL 
        	FETCH cursor_ca
	        INTO :nro_ca, :descrip;

	    while (sqlca.sqlcode==0)
	    {


		    pasadas=1;
 	
		    while (pasadas<=3)
	    	    {
			if (pasadas==1)
	       		{
				strcpy(cod_est.arr,"00"); 
			        cod_est.len=strlen(cod_est.arr);
	        		strcpy(estado,"Pendientes    ");
		        }
      

	                if (pasadas==2)
		        {
  			      strcpy(cod_est.arr,"01"); 
			      cod_est.len=strlen(cod_est.arr);
			      strcpy(estado,"Esperando Rta.");
		        }


            	        if (pasadas==3)
  	                {	
			        strcpy(cod_est.arr,"06"); 
				cod_est.len=strlen(cod_est.arr);
			        strcpy(estado,"Reversos      ");
		        }
 
   
 			pasadas++; 

    
		        EXEC SQL
		            SELECT count(*)
		            INTO :cont
		            FROM cred_trx
		            WHERE nro_ca=:nro_ca AND
		                  cod_est=:cod_est;


		         printf("\n\tCA  %.15s Trx %.15s %d", descrip.arr,estado, cont);

			   /*  printf("\tCA : %.15s Trx pendientes : %d\n", descrip.arr, cont); */


		     }

		     EXEC SQL 
	             FETCH cursor_ca
        	     INTO :nro_ca, :descrip;

		     printf("\n");
	    }

	     EXEC SQL
        	 CLOSE cursor_ca;
	     sleep(iSleep);
             system("clear");
     }		
}
