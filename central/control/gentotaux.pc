/************************************************************************/
/*									*/
/* gentot.pc	    : Listado de totales por tarjeta de transacciones   */
/*                    aprobadas en el Cierre de Lote de Tarjetas.       */
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 20/06/97						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif
 
#define USERID_LEN   20
#define PASSWD_LEN   20

extern int	SqlErrno;

typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;
     
EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR	nro_caj[5];
    VARCHAR	nro_caj_sf[5];
    VARCHAR	monto_ven[12];
    VARCHAR	monto_anu[12];
    VARCHAR	monto_dev[12];
    VARCHAR	cod_tar[2];
    VARCHAR	descrip[30];
    VARCHAR     fecha[4];
EXEC SQL END DECLARE SECTION;

void getFechaActual(char *fecha)
{
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d/%02d/%02d", newtime->tm_mday, 
	           newtime->tm_mon+1, newtime->tm_year);
}


int open_db(str_login *data)
{
int SqlErrno;

    strcpy((char *)userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy((char *)passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
       {
	  SqlErrno=sqlca.sqlcode;
	  return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}


void main (int argc, char *argv[])
{
FILE    *ftot, *fd;
char    fec[15];
char    filename[30];
char    szfecha[5];
char    sznro_caj_sf[5];
int     cont, cont_ven, cont_anu, cont_dev;
int     cont_tot=0;
long    lmonto, lmonto_ven, lmonto_anu, lmonto_dev;
long    lmonto_tot=0;
double  dmonto;
double  dmonto_tot;


     if (argc!=2)
     {
        printf("Uso: gentot <nro de sucursal>\n");
        exit(0);
     }
 
     strcpy(sznro_caj_sf, argv[1]);
     printf("numero de sucursal: %s\n", sznro_caj_sf);
     strcpy((char *)nro_caj_sf.arr, sznro_caj_sf);
     nro_caj_sf.len=strlen(sznro_caj_sf);

     init();

     if ((fd=fopen("/online/log/fecha.dat", "r"))==NULL)
     {
        printf("Error en apertura de archivo: fecha.dat\n");
        exit(0);
     }

     fscanf(fd, "%s", szfecha);
     printf("Fecha leida: %s\n", szfecha);

     strcpy((char *)fecha.arr, szfecha);
     fecha.len=strlen(szfecha);

     strcpy(filename, "/online/chec/suc");
     strcat(filename, &sznro_caj_sf[3]);
     strcat(filename, "/");
     strcat(filename, "totcie.");
     strcat(filename, szfecha);

     if ((ftot=fopen(filename, "w"))==NULL)
     {
         printf("Error en apertura de archivo [%s]\n", filename);
         exit(0);
     }

     printf("Generando: [%s]\n", filename);
   
     fprintf(ftot, "\n\tCOTO C.I.C.S.A.\t\t\tPGM: totcie\n"); 
     getFechaActual(fec);
     printf("Fecha actual: %s\n", fec);
     fprintf(ftot, "\tFecha: %s\n", fec);

     fprintf(ftot, "\n\n\t\t\tListado de totales por tarjeta\n\n\n"); 
     
     fprintf(ftot, "\n\tSUCURSAL: %s\n", nro_caj_sf.arr); 
     fprintf(ftot, "\n\tFecha de las operaciones: %.2s-%2s\n\n\n", 
                   szfecha, &szfecha[2]); 
     fprintf(ftot, "\tTarjeta\t\tTotal de operac.\t\tMonto Neto\n"); 
     fprintf(ftot, "\t-------\t\t----------------\t\t-----------\n\n\n"); 

     EXEC SQL
     DECLARE cursor_tarj CURSOR FOR 
          SELECT cod_tar, descrip
          FROM cred_tarj;

     EXEC SQL
         OPEN cursor_tarj;
 
     EXEC SQL 
         FETCH cursor_tarj
         INTO :cod_tar, :descrip;

     printf("sqlcode: %ld\n", sqlca.sqlcode);

     while (sqlca.sqlcode==0)        
     {

          cont_ven=0;
          cont_dev=0;
          cont_anu=0;

          EXEC SQL
             SELECT count(*), 
                    sum(decode(cod_trx,'00',monto,0)),
                    sum(decode(cod_trx,'01',monto,0)),
                    sum(decode(cod_trx,'02',monto,0))
             INTO :cont_ven, :monto_ven, :monto_anu, :monto_dev
             FROM cred_trx 
             WHERE nro_caj_sf=:nro_caj_sf AND
                   TO_CHAR(TO_DATE(fec_loc, 'MMDDHH24MISS'), 'DDMM')=:fecha AND
                   cod_est='04' AND
                   cod_tar=:cod_tar ; 

        printf("Salida sqlca.code [%d] \n",sqlca.sqlcode);



        lmonto_ven=atoi((char *)monto_ven.arr);
        lmonto_anu=atoi((char *)monto_anu.arr);
        lmonto_dev=atoi((char *)monto_dev.arr);
        lmonto=lmonto_ven - lmonto_anu - lmonto_dev;
        dmonto=(double)lmonto/100;
        cont=cont_ven + cont_anu + cont_dev;

        fprintf(ftot, "\n\t%.25s%6ld%27.2f\n", descrip.arr, cont, dmonto);


/* Acumulo totales */

        lmonto_tot+=lmonto;
        cont_tot+=cont;

        memset(monto_ven.arr, 0, sizeof(monto_ven.arr));
        memset(monto_anu.arr, 0, sizeof(monto_anu.arr));
        memset(monto_dev.arr, 0, sizeof(monto_dev.arr));
  
        EXEC SQL 
            FETCH cursor_tarj
            INTO :cod_tar, :descrip;

        printf("sqlcode: %ld\n", sqlca.sqlcode);

     }

     EXEC SQL
         CLOSE cursor_tarj;
     
     dmonto_tot=(double)lmonto_tot/100;
     fprintf(ftot, "\n\n\n\n                              ");
     fprintf(ftot, " -----------             ---------------\n");
     fprintf(ftot, "\tTotales %23ld %27.2f", cont_tot, dmonto_tot);
     fclose(fd);
     fclose(ftot);

}
