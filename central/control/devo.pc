/*************************************************************************/
/*									 */
/* devoluciones.pc  : Funcion para reinsertar las trx duplicadas o       */
/*		      inexistentes en cred_trx como devoluciones.     	 */
/*									 */
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	 */
/* Cliente	    : Coto						 */
/* Autor	    : Piccirillo Fernando 				 */
/* Fecha	    : 23/03/98						 */
/* Compilador	    : C++						 */
/* Base de datos    : Oracle						 */
/*                                                                       */
/*************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
 
#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN   20
#define PASSWD_LEN   20

extern int	SqlErrno;

struct trx 
{
char cod_aut[9];
char fecha[7];
char cod_resoluc[3];
char cod_trx[3];
char cod_pro[7];
char mod_env[3];
char cant_ret[5];
};

struct trx TrxRead;


typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;
     

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     nro_suc[3];
    VARCHAR     nro_caj[5];
    VARCHAR     nro_caj_ori[5];
    VARCHAR     nro_caj_ca[8];
    VARCHAR     nro_trx[4];
    VARCHAR     mod_env[2];
    VARCHAR     cod_tar[2];
    VARCHAR     nro_ca[2];
    VARCHAR     cod_trx[2];
    VARCHAR     cod_est[2];
    VARCHAR     can_ret[4];
    VARCHAR     nro_lot[3];
    VARCHAR     cod_pro[6];
    VARCHAR     monto[12];
    VARCHAR     nro_tar[20];
    VARCHAR     nro_trc[6];
    VARCHAR     fec_loc[10];
    VARCHAR     fec_loc2[5];
    VARCHAR     fec_ven[4]; 
    VARCHAR     mod_ing[3];
    VARCHAR     nro_tic[4]; 
    VARCHAR     nro_caj_sf[5]; 
    VARCHAR     nro_caj_fic[5]; 
    VARCHAR     cod_aut[6]; 
    VARCHAR     fec_vtacard[4]; 
    VARCHAR     nro_com[15]; 
    VARCHAR     plan_iso[1];
    VARCHAR     plan_sf[2];
    VARCHAR     nro_cuo[3];  
     
EXEC SQL END DECLARE SECTION;


void getFechaActual(char *fecha)
{
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d%02d%02d", newtime->tm_hour,
	           newtime->tm_min, newtime->tm_sec);
}

int open_db(str_login *data)
{
int SqlErrno;

    strcpy((char *)userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy((char *)passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
       {
	  SqlErrno=sqlca.sqlcode;
	  return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}


void main (int argc, char *argv[])
{
FILE *fd;
FILE *fdfec;
FILE *salida;
char szfecha[5];
char fec[23];
char fec_loc3[5];
char filelog[100];
char szfec_loc[11];
time_t hIni;
int code;

  init();

  printf("Apertura de archivo fecha.dat\n");
  if ((fdfec=fopen("/online/log/fecha.dat", "r"))==NULL)
      {
        printf ("\nError: Apertura de archivo fecha.dat\n");
        exit(1);
      }

  fscanf(fdfec, "%s", szfecha);
  printf("Fecha leida de fecha.dat: [%s]\n", szfecha);

  strcpy(filelog, "/online/log/procdev.");
  strcat(filelog, szfecha);

  printf("Apertura de archivo [%s]\n", filelog);
  if ((salida=fopen(filelog, "a"))==NULL)
      {
        printf ("\nError: Apertura de archivo [%s]\n", filelog);
        exit(1);
      }

  hIni=time(&hIni);
  printf("Comienza proceso de actualizacion de pendientes %s",
                  asctime(localtime(&hIni)));

      strncpy((char *)fec_loc3, &szfecha[2],2);
      strncat((char *)fec_loc3, szfecha,2);
      strcpy((char *)fec_loc2.arr, fec_loc3);
      fec_loc2.len=strlen((char *)fec_loc2.arr);

  printf("fec_loc:  %s \n", fec_loc2.arr);

  EXEC SQL
      DECLARE cursor_trx CURSOR FOR
         SELECT nro_caj,nro_trx,cod_tar,nro_ca,monto,nro_tar,fec_loc,fec_ven,
                mod_ing,nro_tic,nro_caj_sf,cod_trx
         FROM AMEX;

  printf("declare: sqlcode: %ld\n", sqlca.sqlcode);

  EXEC SQL
      OPEN cursor_trx;
 
  EXEC SQL
      FETCH cursor_trx
      INTO :nro_caj_ori,:nro_trx,:cod_tar,:nro_ca,:monto,:nro_tar,:fec_loc,
      :fec_ven,:mod_ing,:nro_tic,:nro_caj_sf,:cod_trx;

    printf("1er fetch: sqlcode: %ld\n", sqlca.sqlcode);

    while (sqlca.sqlcode==0)
    {

       strcpy((char *)nro_suc.arr, "001");
       nro_suc.len=strlen((char *)nro_suc.arr);

       strcpy((char *)mod_env.arr, "01");
       mod_env.len=strlen((char *)mod_env.arr);

       strcpy((char *)cod_est.arr, "45");
       cod_est.len=strlen((char *)cod_est.arr);

       strcpy((char *)can_ret.arr, "0000");
       can_ret.len=strlen((char *)can_ret.arr);

       strcpy((char *)cod_pro.arr, "000000");
       cod_pro.len=strlen((char *)cod_pro.arr);

       strcpy((char *)cod_aut.arr, "000000");
       cod_aut.len=strlen((char *)cod_aut.arr);

       strcpy((char *)mod_ing.arr, "012");
       mod_ing.len=strlen((char *)mod_ing.arr);

       strcpy((char *)nro_com.arr, "");
       nro_com.len=strlen((char *)nro_com.arr);

       strcpy((char *)plan_iso.arr, "0");
       plan_iso.len=strlen((char *)plan_iso.arr);

       strcpy((char *)plan_sf.arr, "00");
       plan_sf.len=strlen((char *)plan_sf.arr);

       strcpy((char *)nro_cuo.arr, "001");
       nro_cuo.len=strlen((char *)nro_cuo.arr);


       if (strcmp((char *)cod_trx.arr,"00")==0)
       {
       strcpy((char *)cod_trx.arr, "02");
       cod_trx.len=strlen((char *)cod_trx.arr);
       }
       else
       {
       strcpy((char *)cod_trx.arr, "00");
       cod_trx.len=strlen((char *)cod_trx.arr);
       }

 
       EXEC SQL
           SELECT NRO_CAJ_FIC
           INTO  :nro_caj
           FROM   cred_suc
           WHERE  NRO_CAJ_SF=:nro_caj_sf
           AND    tip_cie=1;

       EXEC SQL
           SELECT NRO_COM
           INTO  :nro_com
           FROM   cred_com
           WHERE  NRO_CAJ_SF=:nro_caj_sf
           AND    COD_TAR=:cod_tar;

       EXEC SQL
           SELECT NRO_CAJ_CA,NRO_LOT
           INTO  :nro_caj_ca,:nro_lot
           FROM   cred_term
           WHERE  NRO_CAJ=:nro_caj
           AND    NRO_CA=:nro_ca;

  printf("nro_caj_sf:  %s \n", nro_caj_sf.arr);
  printf("nro_caj:  %s \n", nro_caj.arr);
  printf("nro_caj_ori:  %s \n", nro_caj_ori.arr);
  printf("nro_tar:  %s \n", nro_tar.arr);
  printf("monto:  %s \n", monto.arr);
  printf("nro_trx:  %s \n", nro_trx.arr);
  printf("nro_ca:  %s \n", nro_ca.arr);
  printf("cod_tar:  %s \n", cod_tar.arr);
  printf("nro_com:  %s \n", nro_com.arr);
  printf("nro_caj_ca:  %s \n", nro_caj_ca.arr);
  printf("nro_lot:  %s \n", nro_lot.arr);
  printf("fec_loc:  %s \n", fec_loc.arr);
  printf("fec_ven:  %s \n", fec_ven.arr);


/*  fprintf(salida, "procpen: nro_com [%s] nro_caj_ca [%s]\n", 
                   nro_com.arr, nro_caj_ca.arr);    */

       EXEC SQL
           INSERT
              INTO cred_trx (NRO_SUC, 
                             NRO_CAJ, 
                             NRO_TRX, 
                             MOD_ENV, 
                             COD_TAR,
                             NRO_CA,
                             COD_TRX,
                             COD_EST,
                             CAN_RET,
                             NRO_LOT,
                             COD_PRO,
                             MONTO,
                             NRO_TAR,
                             FEC_LOC,
                             FEC_VEN,
                             MOD_ING,
                             NRO_TIC,
                             COD_AUT,
                             NRO_CAJ_SF,
                             NRO_CAJ_ORI,
                             NRO_CAJ_CA,
                             NRO_COM,
                             PLAN_ISO,
                             PLAN_SF,
                             NRO_CUO)

              VALUES (:nro_suc, 
                      :nro_caj, 
                      :nro_trx, 
                      :mod_env, 
                      :cod_tar,
                      :nro_ca,
                      :cod_trx,
                      :cod_est,
                      :can_ret,
                      :nro_lot,
                      :cod_pro,
                      :monto, 
                      :nro_tar,
                      :fec_loc,
                      :fec_ven,
                      :mod_ing,
                      :nro_trx,
                      :cod_aut,
                      :nro_caj_sf,
                      :nro_caj_ori,
                      :nro_caj_ca,
                      :nro_com,
                      :plan_iso,
                      :plan_sf,
                      :nro_cuo);    

       printf("insert: sqlcode: %ld\n", sqlca.sqlcode);

       if (sqlca.sqlcode==0)
       {
          fprintf(salida, "procpen: trx agregada en cred_trx\n");
          EXEC SQL
              COMMIT;
          printf("commit: sqlcode: %ld\n", sqlca.sqlcode);

       }
       else
       {

          fprintf(salida, "procpen: error en insert tabla cred_trx %ld\n", 
                  sqlca.sqlcode);
          printf("procpen: error en insert tabla cred_trx %ld\n", 
                  sqlca.sqlcode);
       }

       EXEC SQL
           FETCH cursor_trx
           INTO :nro_caj_ori,:nro_trx,:cod_tar,:nro_ca,:monto,:nro_tar,:fec_loc,
                :fec_ven, :mod_ing,:nro_tic,:nro_caj_sf;

        printf("2do fetch: sqlcode: %ld\n", sqlca.sqlcode);

  } /* Fin del while de archivo pending */

  fclose(fd);
  fclose(fdfec);
  fclose(salida);

  hIni=time(&hIni);
  fprintf(salida, "\nProceso finalizado %s\n",
                  asctime(localtime(&hIni)));

  EXEC SQL
      CLOSE cursor_trx;

}
