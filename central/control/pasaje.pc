/*************************************************************************/
/*                                                                       */
/* pasaje.pc        : Pasa las transacciones con cod_est='48' a '00'     */
/*                                                                       */
/*                                                                       */
/* Proyecto         : Autorizacion de tarjetas de credito - StoreFlow.   */
/* Cliente          : Coto                                               */
/* Autor            : Andres Manggini                                    */
/* Fecha            : 17/07/98                                           */
/* Compilador       : Pro*C                                              */
/* Base de datos    : Oracle                                             */
/*                                                                       */
/*************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>


#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif


#define BOOL char
#define TRUE 1
#define FALSE 0

#define USERID_LEN   20
#define PASSWD_LEN   20


extern int      SqlErrno;

typedef struct
{
    char        userid[USERID_LEN+1];
    char        passwd[PASSWD_LEN+1];
} str_login;


EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR     FechaDesde[4];
    VARCHAR     FechaHasta[4];

    VARCHAR     userid[20];
    VARCHAR     passwd[20];

EXEC SQL END DECLARE SECTION;


int open_db(str_login *data)
{
int SqlErrno;

    strcpy((char *)userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy((char *)passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
        CONNECT :userid IDENTIFIED BY :passwd;
    if (sqlca.sqlcode!=OK)
       {
          SqlErrno=sqlca.sqlcode;
          return NOOK;
       }
    SqlErrno=OK;
    return OK;
}

int init()
{
    str_login   login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    return open_db(&login_data);
}


void ShowSyntax(char* szProgramName)
{
    printf("\n\nUso: %s <MMDD> [/p] para trabajar sobre una fecha.\n", szProgramName);
    printf("     %s <MMDD> <MMDD> [/p] para trabajar entre fechas.\n", szProgramName);
    printf("\nEl parametro '/p' (opcional) hace que aparezca un pedido de confirmacion antes de actualizar la tabla.\n\n\n", szProgramName);
    exit(-1);
}

void main (int argc, char *argv[])
{
  FILE *fd;
  time_t  hIni;
  long nCont = 0;
  BOOL bPreguntar = FALSE;
  BOOL bUsarSegundaFecha = FALSE;
  int  iConfirma;


  switch( argc )
  {
	case 2: 
		if ( strcmp( argv[1], "/p") == 0 )
			ShowSyntax(argv[0]);
		break;
	case 3: 
		if ( strcmp( argv[1], "/p") == 0 )
			ShowSyntax(argv[0]);
                bPreguntar = ( strcmp( argv[2], "/p") == 0) ? TRUE : FALSE; 
		bUsarSegundaFecha = !bPreguntar;
		break;
	case 4: 
		if ( strcmp( argv[1], "/p") == 0 || strcmp( argv[2],"/p") == 0)
			ShowSyntax(argv[0]);
                if ( strcmp( argv[3], "/p") != 0 )
			ShowSyntax(argv[0]);
		bPreguntar = (strcmp( argv[3],"/p") == 0) ? TRUE : FALSE; 
		bUsarSegundaFecha = TRUE;
		break;
	default: 
	    ShowSyntax(argv[0]);
	    exit(-1);
	    break;
  }

  printf("\nApertura del archivo pasaje.log\n");
  if ( (fd=fopen("/online/log/pasaje.log", "w+")) == NULL )
  {
    printf ("\nError: Apertura del archivo pasaje.log\n");
    exit(-1);
  }

  if( NOOK == init() )
  {
    printf("Error en 'init()' ");
    fprintf(fd, "Error en 'init()' ");
    exit(-1);
  }


   hIni=time(&hIni);
   printf("\nInicio: %s\n", asctime(localtime(&hIni)) );
   fprintf(fd, "\nInicio: %s\n", asctime(localtime(&hIni)) );

  /* Guardo las fechas */
  strcpy( (char*) FechaDesde.arr, argv[1]);
  FechaDesde.len = strlen( (char*) FechaDesde.arr);

  if ( bUsarSegundaFecha )
  {
     strcpy( (char*) FechaHasta.arr, argv[2]);
     FechaHasta.len = strlen( (char*) FechaHasta.arr);
  }
  else
  { 
     strcpy( (char*) FechaHasta.arr, argv[1]);
     FechaHasta.len = strlen( (char*) FechaHasta.arr);
  }
     
  /**/

 
  printf("\nComienza proceso de actualizacion...\n");
  fprintf(fd, "\nComienza proceso de actualizacion...\n");


	/* Cuento la cantidad de registros a actualizar */
        EXEC SQL
	   SELECT count(*)
	     INTO nCont
	     FROM cred_trx
           WHERE cod_est='48' 
	     AND (substr(fec_loc,1,4) BETWEEN  :FechaDesde AND :FechaHasta);

	printf("\nRegistros a actualizar: %i", nCont);
	fprintf(fd, "\nRegistros a actualizar: %i", nCont);


	if ( bPreguntar && nCont > 0)
	{
		printf("\n\n\tConfirma la actualizacion de %i registros (s/n)? ", nCont);
		do 
		{        
			iConfirma = toupper( getchar() );
			if ( 'N' == (iConfirma) )
			{
			   printf("\nNo se confirmo la actualizacion...\n\n");
			   fprintf(fd, "\nNo se confirmo la actualizacion...\n\n");
			   printf("\nSaliendo del programa...\n\n");
			   fprintf(fd, "\nSaliendo del programa...\n\n");
			   fclose(fd); 
			   exit(0);
			}
		} while (  iConfirma != 'N' && iConfirma != 'S' );

	}

	if ( nCont > 0 )
	{
		/* Actualizo */
	        EXEC SQL
	           UPDATE cred_trx
		   SET cod_est = '00'     
	           WHERE cod_est='48' 
		     AND (substr(fec_loc,1,4) BETWEEN  :FechaDesde AND :FechaHasta); 
    
	        EXEC SQL
	          COMMIT;
	        printf("\nSe actualizaron %i registros", nCont);
		fprintf(fd, "\nSe actualizaron %i registros", nCont);
	}
	else
	{
		printf("\nNo hay registros a actualizar\n");
		fprintf(fd, "\nNo hay registros a actualizar\n");
	}       
        

  printf("\n\nSaliendo del programa...\n\n");
  fprintf(fd, "\n\nSaliendo del programa...\n\n");
  hIni=time(&hIni);
  printf("\nFin: %s\n", asctime(localtime(&hIni)) );
  fprintf(fd, "\nFin: %s\n", asctime(localtime(&hIni)) );
  fclose(fd);
}

