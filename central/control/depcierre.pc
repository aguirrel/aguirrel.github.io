/************************************************************************/
/*									*/
/* depcierre.pc	    : Funcion SQL para realizar la depuracion           */
/*		      de la tabla cred_cierre. 				*/
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Denise Lucien 					*/
/* Fecha	    : 09/09/97						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/************************************************************************/

/* Este proceso depura la tabla cred_cierre con el mes dado. */

#include <time.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN       20
#define PASSWD_LEN       20

typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;


int open_db(str_login *data);
void init();
void getFechaActual(char *fecha);

EXEC SQL INCLUDE SQLCA;

int               SqlErrno;


EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     nro_caj[5];
    VARCHAR     mes[2];
EXEC SQL END DECLARE SECTION;


int open_db(str_login *data)
{
int SqlErrno;

    strcpy(userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy(passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;

    if (sqlca.sqlcode!=OK)
        {
	SqlErrno=sqlca.sqlcode;
	return NOOK;
        }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}

void getFechaActual(char *hora)
{
char fecha[11];
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d%02d%02d%02d%02d", newtime->tm_mday, 
	newtime->tm_mon+1, newtime->tm_hour, newtime->tm_min, 
	newtime->tm_sec);

    sprintf(hora, "%2.2s:%2.2s:%2.2s", &fecha[4], &fecha[6], &fecha[8]); 

}


main(int argc, char *argv[])
{
int               code;
char              szmes[3];
int               lmes;

    init();

    if (argc!=2)
    {
       printf("Uso: depcierre XX (XX: nro de mes a depurar)\n");
       exit(0);
    }

    lmes=atoi(argv[1]);
    if (lmes==1)
    {
       lmes=12;
    }
    else
    {
       lmes--;
    }

    sprintf(szmes, "%02d", lmes);

    strcpy(mes.arr,szmes);
    mes.len=strlen(szmes);

    printf("mes a depurar: [%s]\n", mes.arr);

    EXEC SQL
        DECLARE cursor_term CURSOR FOR
            SELECT distinct(nro_caj)
            FROM cred_term
            ORDER BY nro_caj;

    EXEC SQL
        OPEN cursor_term;

    EXEC SQL 
        FETCH cursor_term
           INTO :nro_caj;

    code = sqlca.sqlcode;

    strcpy(mes.arr,szmes);
    mes.len=strlen(szmes);

    while(code==0)
    {
       printf("Numero de caja a depurar [%s] \n", nro_caj.arr);
       fflush(stdout);

       EXEC SQL
           DELETE FROM cred_cierre
              WHERE nro_caj = :nro_caj AND
              TO_CHAR(TO_DATE(fec_env, 'MMDDHH24MISS'), 'MM') = :mes;

       if((sqlca.sqlcode!=0) && (sqlca.sqlcode!=1403))
         {
            printf("Error en Delete (Tabla cred_cierre) %ld\n",sqlca.sqlcode);
         }
 
       EXEC SQL
           COMMIT;
 
       EXEC SQL 
           FETCH cursor_term
              INTO :nro_caj;

       code = sqlca.sqlcode;

    }

    EXEC SQL
        CLOSE cursor_term;   
    
    printf("\nDepuracion Finalizada \n");
   
    return OK;

}
