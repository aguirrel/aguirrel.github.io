/************************************************************************/
/*									*/
/* depuaux.pc	    : Funcion SQL para realizar la depuracion           */
/*		      de la tabla cred_trx. 				*/
/*									*/
/* Proyecto	    : Autorizacion de tarjetas de credito - StoreFlow.	*/
/* Cliente	    : Coto						*/
/* Autor	    : Rolando Loustric					*/
/* Fecha	    : 21/08/96						*/
/* Compilador	    : C++						*/
/* Base de datos    : Oracle						*/
/*									*/
/************************************************************************/

#include <time.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef OK
  #define OK    0
  #define NOOK  -1
#endif

#define USERID_LEN       20
#define PASSWD_LEN       20

#define varcpy(X,Y)		{ strncpy(X.arr,Y , sizeof(X.arr));  \
				  X.len=(sizeof(X.arr) < strlen(Y) ? \
				       sizeof(X.arr) : strlen(Y)); }
#define varcpy2(X,Y)		{ strncpy(X, Y.arr, Y.len);\
				  X[Y.len]=0; }

typedef struct
{
    char	userid[USERID_LEN+1];
    char	passwd[PASSWD_LEN+1];
} str_login;


int open_db(str_login *data);
void init();
void getFechaActual(char *fecha);

EXEC SQL INCLUDE SQLCA;

long              ret;
int               code;
int               SqlErrno;
char              hor[11];
char              caj[6];


EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR	userid[20];
    VARCHAR	passwd[20];
    VARCHAR     nro_caj[5];
EXEC SQL END DECLARE SECTION;


int open_db(str_login *data)
{
int SqlErrno;

    strcpy(userid.arr, data->userid);
    userid.len=strlen(data->userid);
    strcpy(passwd.arr, data->passwd);
    passwd.len=strlen(data->passwd);

    EXEC SQL
	CONNECT :userid IDENTIFIED BY :passwd;

    if (sqlca.sqlcode!=OK)
        {
	SqlErrno=sqlca.sqlcode;
	return NOOK;
        }
    SqlErrno=OK;
    return OK;
}

void init()
{
    str_login	login_data;

    strcpy(login_data.userid, "u601");
    strcpy(login_data.passwd, "u601");
    open_db(&login_data);
}

void getFechaActual(char *hora)
{
char fecha[11];
struct tm	*newtime;
time_t	        ltime;

    time(&ltime);
    newtime=localtime(&ltime);

    sprintf(fecha, "%02d%02d%02d%02d%02d", newtime->tm_mday, 
	newtime->tm_mon+1, newtime->tm_hour, newtime->tm_min, 
	newtime->tm_sec);

    sprintf(hora, "%2.2s:%2.2s:%2.2s", &fecha[4], &fecha[6], &fecha[8]); 

}


int main()
{
time_t hIni;
FILE    *fd;
  
    if ((fd = fopen("depuracion.log", "w")) == NULL) 
    {
	printf("error en apertura de log\n");
 	exit(1);
    }

    init();
    
    EXEC SQL
        DECLARE cursor_term CURSOR FOR
            SELECT nro_caj
            FROM cred_term
            ORDER BY nro_caj;

    EXEC SQL
        OPEN cursor_term;

    EXEC SQL 
        FETCH cursor_term
           INTO :nro_caj;

    code = sqlca.sqlcode;

    varcpy2(caj, nro_caj);

    while(code==0)
    {

       fprintf(fd, "Numero de caja a depurar [%s] \n", caj);
       printf("Numero de caja a depurar [%s] \n", caj);

       EXEC SQL
           INSERT INTO hist_trx1
                   SELECT * FROM cred_trx 
                      WHERE nro_caj = :nro_caj AND
                            cod_est = '04' AND 
                            fec_loc like '0414%';


       if (sqlca.sqlcode==-1)
       {
           fprintf(fd, "Error en Insert (Tabla hist_trx1) %ld\n",sqlca.sqlcode);
           fprintf(fd, "caja: [%s]\n", caj);

           EXEC SQL 
              FETCH cursor_term
                 INTO :nro_caj;
     
           varcpy2(caj, nro_caj);

           code = sqlca.sqlcode;

           continue;
       }
           

       if (sqlca.sqlcode!=0)
       {
           fprintf(fd, "Error en Insert (Tabla hist_trx1) %ld\n",sqlca.sqlcode);
           printf("Error en Insert (Tabla hist_trx1) %ld\n",sqlca.sqlcode);

           EXEC SQL
               ROLLBACK ; 
           exit(1);
       }

       EXEC SQL
           COMMIT;

       EXEC SQL 
          INSERT INTO rech_trx
(NRO_SUC,
NRO_CAJ,
NRO_TRX,
MOD_ENV,
COD_TAR,
NRO_CA,
COD_TRX,
COD_EST,
CAN_RET,
NRO_LOT,
COD_PRO,
MONTO,
NRO_TAR,
NRO_TRC,
FEC_LOC,
FEC_VEN,
MOD_ING,
TRACKII,
NRO_TIC_ORI,
FEC_ORI,
NRO_TIC,
FEC_ENV,
FEC_RTA,
COD_AUT,
NRO_REF,
COD_RTA,
FEC_VTACARD,
FEC_CIE,
NRO_CAJ_SF,
NRO_CAJ_ORI)
                 SELECT 
NRO_SUC,
NRO_CAJ,
NRO_TRX,
MOD_ENV,
COD_TAR,
NRO_CA,
COD_TRX,
COD_EST,
CAN_RET,
NRO_LOT,
COD_PRO,
MONTO,
NRO_TAR,
NRO_TRC,
FEC_LOC,
FEC_VEN,
MOD_ING,
TRACKII,
NRO_TIC_ORI,
FEC_ORI,
NRO_TIC,
FEC_ENV,
FEC_RTA,
COD_AUT,
NRO_REF,
COD_RTA,
FEC_VTACARD,
FEC_CIE,
NRO_CAJ_SF,
NRO_CAJ_ORI
FROM cred_trx
                     WHERE nro_caj = :nro_caj AND 
                           cod_est IN ('03','10', '12', 'E3', 'E4') AND
                           fec_loc like '0414%';

       if (sqlca.sqlcode!=0)
       {
           fprintf(fd, "Error en Insert (Tabla rech_trx) %ld\n",sqlca.sqlcode);
           printf("Error en Insert (Tabla rech_trx) %ld\n",sqlca.sqlcode);
           EXEC SQL
               ROLLBACK ; 
           exit(1);
       }

       EXEC SQL
           COMMIT;

       EXEC SQL
           DELETE FROM cred_trx
              WHERE nro_caj = :nro_caj AND
                    cod_est IN ('04', '03', '07', '10', '12', 'E3', 'E4') AND
                    fec_loc like '0414%';

       if ((sqlca.sqlcode!=0) && (sqlca.sqlcode!=1403))
       {
           fprintf(fd, "Error en Delete (Tabla cred_trx) %ld\n",sqlca.sqlcode);
           printf("Error en Delete (Tabla cred_trx) %ld\n",sqlca.sqlcode);
           EXEC SQL
               ROLLBACK;
           exit(1);
       }
 
       EXEC SQL
           COMMIT;
 
       EXEC SQL 
           FETCH cursor_term
              INTO :nro_caj;
     
       varcpy2(caj, nro_caj);

       code = sqlca.sqlcode;

       hIni=time(&hIni);
       fprintf(fd, "finalizando caja: %s", asctime(localtime(&hIni)));

    } /* Fin del while ppal. */

    EXEC SQL
        CLOSE cursor_term;
    
    hIni=time(&hIni);
    fprintf(fd, "\nDepuracion Finalizada %s\n", asctime(localtime(&hIni)));
    close (fd);  
    return OK;

}
