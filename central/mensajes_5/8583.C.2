#ifdef OS_Linux
#pragma pack(1)
#endif

/*
+-----------------+------------------------------------------------------------+
| FUENTE          | 8583.C                                                     |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Definicion de la clase Iso_Msg para el manejo de los       |
|                 | mensajes a ser enviados al centro autorizador              | 
+-----------------+------------------------------------------------------------+
*/
#include "8583.h"
#include "Daemons.h"
#include "Includes.h"
extern "C" 
{
	#include "DBTrxOff.h"
	#include "DBServices.h"
}

#define	BYTE_1			0x18
#define BYTE_2			0x10
#define	BYTE_3			0x08
#define BYTE_4			0x00

#define MASK_1			0xFF000000L
#define MASK_2			0x00FF0000L
#define MASK_3			0x0000FF00L
#define MASK_4			0x000000FFL

extern int	SqlErrno;

str_iso_fields iso_fields[]=
{
	 /* Bit, Type, Len, Format */
    { 2, LVAR,  2, FBCD   }, /* TBCD = BCD normal - FBCD = BCD con hexa 'F' en nibble de relleno */
    { 3, LFIX,  6, TBCD   }, 
    { 4, LFIX, 12, TBCD   }, 
    { 7, LFIX, 10, TBCD   },
    {11, LFIX,  6, TBCD   }, 
    {12, LFIX,  6, TBCD   }, 
    {13, LFIX,  4, TBCD   }, 
    {14, LFIX,  4, TBCD   },
    {15, LFIX,  4, TBCD   }, 
    {17, LFIX,  4, TBCD   }, 
    {19, LFIX,  3, TBCD   }, 
    {22, LFIX,  3, TBCD   }, 
    {24, LFIX,  3, TBCD   },
    {25, LFIX,  2, TBCD   }, 
	{34, LVAR,  2, TASCII },
    {35, LVAR,  2, FBCD   }, 
    {37, LFIX, 12, TASCII }, 
    {38, LFIX,  6, TASCII },
    {39, LFIX,  2, TASCII }, 
    {41, LFIX,  8, TASCII }, 
    {42, LFIX, 15, TASCII }, 
    {45, LVAR,  2, TASCII },  /* DS29052001 */
    {46, LVAR,  3, TASCII },  /* DS29052001 */
    {48, LVAR,  3, TASCII },
    {49, LFIX,  3, TASCII }, 
	{52, LFIX,  8, TASCII },  /* Modificacion PINPAD */ 
	{54, LVAR,  3, TASCII },
    {55, LVAR,  3, TASCII }, 
	{59, LVAR,  3, TASCII },
    {60, LVAR,  3, TASCII }, 
    {62, LVAR,  3, TASCII }, 
    {63, LVAR,  3, TASCII },
    { 0,    0,  0, 0 }
};

str_fields_mask fields_mask[]=
{
	{ TYPE_VISA_VENTA,					0x723C0580, 0x00C18214, 0x723C2580, 0x20CD9634},	/* Modificacion PINPAD */
	{ TYPE_VISA_DEVOL,					0x723C0580, 0x00C18014, 0x723C0580, 0x2CCD9634},	/* Modificacion PINPAD */
	{ TYPE_VISA_ANUL_VENTA,				0x723C0580, 0x08C18014, 0x723C0580, 0x28C19634},	/* Modificacion PINPAD */
	{ TYPE_VISA_ANUL_DEVOL,				0x723C0580, 0x08C18014, 0x723C0580, 0x28C19634},	/* Modificacion PINPAD */
	{ TYPE_VISA_VENTA_RTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_DEVOL_RTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_ANUL_VENTA_RTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_ANUL_DEVOL_RTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_VENTA_LOCAL,			0x723C8580, 0x04C18014, 0x723C8580, 0x24C18234},   /* DS11062002 dice 0x24cd8214 */
	{ TYPE_VISA_DEVOL_LOCAL,            0x723C8580, 0x04C18014, 0x723C8580, 0x24C18234},   /* DS11062002 dice 0x24cd8214 */
	{ TYPE_VISA_ANUL_VENTA_LOCAL,		0x723C8580, 0x0CC18014, 0x723C8580, 0x0CC18034},
	{ TYPE_VISA_ANUL_DEVOL_LOCAL,		0x723C8580, 0x0CC18014, 0x723C8580, 0x0CC18034},
	{ TYPE_VISA_VENTA_LOCAL_RTA,		0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_DEVOL_LOCAL_RTA,		0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_ANUL_VENTA_LOCAL_RTA,	0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_ANUL_DEVOL_LOCAL_RTA,	0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_BATCH,					0x723C0580, 0x0CC08016, 0x723C8580, 0x0CC18416},
	{ TYPE_VISA_BATCH_RTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_VENTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_DEVOL,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_ANUL_VENTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_ANUL_DEVOL,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_VENTA_RTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_DEVOL_RTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_ANUL_VENTA_RTA,		0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_REV_ANUL_DEVOL_RTA,		0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_CIERRE,					0x22220100, 0x00C00012, 0x22220100, 0x00C00012},
	{ TYPE_VISA_CIERRE_B,				0x22220100, 0x00C00012, 0x22220100, 0x00C00012},
	{ TYPE_VISA_CIERRE_RTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_CIERRE_B_RTA,			0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},
	{ TYPE_VISA_TEST,					0x22200100, 0x00C00000, 0x22200100, 0x00C00010},
	{ TYPE_VISA_TEST_RTA,				0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF},    
	{ 0,								0x00000000, 0x00000000, 0x00000000, 0x00000000}
};

#define	getbit(n)		(0x80000000>>((n)-1))
#define getbyte(x,y)	( ( (x) >> (8 * (4 - (y)) ) ) & 0xFF)

/*******************************/
int ascii2bcd(char *str, int len)
{
    static char	bcd_str[100];
    int		cont;
    int		bcd_len;
    int		ascii_len;

    memset(bcd_str, 0, sizeof(bcd_str));
    
	bcd_len=len/2+len%2;
    ascii_len=len;
    for (cont=bcd_len-1; cont>=0; cont--)
    {
		bcd_str[cont]=(str[ascii_len-1+(cont-bcd_len+1)*2]-0x30);
		if ((ascii_len-2+(cont-bcd_len+1)*2)>=0)
			bcd_str[cont]|=(str[ascii_len-2+(cont-bcd_len+1)*2]-0x30)*0x10;
    }
	memcpy(str, bcd_str, bcd_len);
    return bcd_len;
}
/*********************************/
/* iRelleno: 0: Deja el ultimo nibble en '0' si es impar */
/*           1: Deja el ultimo nibble en 'F' si es impar */
int ascii2bcd_2(char *str, int len, int iRelleno)
{
    static char	bcd_str[100];
    int		cont;
    int		bcd_len;
    int		ascii_len;

    memset(bcd_str, 0, sizeof(bcd_str));
    
	bcd_len=len/2+len%2;
    ascii_len=len;
    for (cont=0; cont<bcd_len; cont++)
    {
		bcd_str[cont]=(str[cont*2]-0x30)*0x10;
		if ((cont<(bcd_len-1))||(len%2==0))
			bcd_str[cont]|=(str[(cont*2)+1]-0x30);
		else
		{
			if (iRelleno==1)
			{
				if (cont+1==bcd_len)
				{
					bcd_str[cont]|= 0x0F;
				}
			}		
		}
    }
    memcpy(str, bcd_str, bcd_len);
    return bcd_len;
}
/***********************************/
int bcd2ascii(char *str, int bcd_len)
{
    static char	ascii_str[100];
    int		cont;
    int		ascii_len;

    memset(ascii_str, 0, sizeof(ascii_str));
    ascii_len=bcd_len*2;

    for(cont=0; cont<ascii_len; cont+=2)
    {
		ascii_str[cont]=(str[cont/2]&0x00F0)/0x10+0x30;
		ascii_str[cont+1]=(str[cont/2]&0x000F)+0x30;
    }

    memcpy(str, ascii_str, ascii_len+1);
    return ascii_len;
}
/****************/
Iso_Msg::Iso_Msg()
{
	type=0;
	bitmap1=0;
	bitmap2=0;
	data_len=0;
	memset (data, 0, sizeof(data));
	sprintf(szNroCA, "??");

}
/****************************/
Iso_Msg::Iso_Msg(int msg_type)
{
	char	aux_str[200];

	type=msg_type;
	bitmap1=0;
	bitmap2=0;
	data_len=0;
	memset (data, 0, sizeof(data));
	sprintf(aux_str, "%03d%s%s", strlen(VERSION_ISO)+strlen(VERSION_NRO), VERSION_ISO, VERSION_NRO);
	PutField(60, aux_str);
	sprintf(szNroCA, "??");

	switch (type)
	{
	case TYPE_VISA_VENTA:
	case TYPE_VISA_VENTA_LOCAL:
	case TYPE_VISA_REV_VENTA:
	case TYPE_VISA_VENTA_RTA:
	case TYPE_VISA_VENTA_LOCAL_RTA:
	case TYPE_VISA_REV_VENTA_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_VENTA);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_DEVOL:
	case TYPE_VISA_DEVOL_LOCAL:
	case TYPE_VISA_REV_DEVOL:
	case TYPE_VISA_DEVOL_RTA:
	case TYPE_VISA_DEVOL_LOCAL_RTA:
	case TYPE_VISA_REV_DEVOL_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_DEVOL);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_ANUL_VENTA:
	case TYPE_VISA_ANUL_VENTA_LOCAL:
	case TYPE_VISA_REV_ANUL_VENTA:
	case TYPE_VISA_ANUL_VENTA_RTA:
	case TYPE_VISA_ANUL_VENTA_LOCAL_RTA:
	case TYPE_VISA_REV_ANUL_VENTA_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_ANUL_VENTA);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_ANUL_DEVOL:
	case TYPE_VISA_ANUL_DEVOL_LOCAL:
	case TYPE_VISA_REV_ANUL_DEVOL:
	case TYPE_VISA_ANUL_DEVOL_RTA:
	case TYPE_VISA_ANUL_DEVOL_LOCAL_RTA:
	case TYPE_VISA_REV_ANUL_DEVOL_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_ANUL_DEVOL);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_BATCH:
	case TYPE_VISA_BATCH_RTA:
		break;
	case TYPE_VISA_CIERRE:
	case TYPE_VISA_CIERRE_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_CIERRE);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_CIERRE_B:
	case TYPE_VISA_CIERRE_B_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_CIERRE_B);
		PutField(3, aux_str);
		break;
	case TYPE_VISA_TEST:
	case TYPE_VISA_TEST_RTA:
		sprintf(aux_str, "%06d", OPCODE_VISA_TEST);
		PutField(3, aux_str);
		break;
	}
}
/*********************************************/
Iso_Msg::Iso_Msg(char *msg_string, int msg_len)
{
    char	type_aux[5];
	long	lCodiProc;
	char	szCodiProc[7];

    if (msg_len<10)		// Si el largo del mensaje es menor al largo
	return;			// del tipo de mensaje + bitmap, no es valido.

	sprintf(szNroCA, "??");

    memset (type_aux, 0, sizeof(type_aux));
    memset (data, 0, sizeof(data));
    data_len=msg_len-10;

    bitmap1=( (msg_string[2] << BYTE_1) & MASK_1 ) |
	    ( (msg_string[3] << BYTE_2) & MASK_2 ) |
	    ( (msg_string[4] << BYTE_3) & MASK_3 ) | 
	    ( (msg_string[5] << BYTE_4) & MASK_4 );
    bitmap2=( (msg_string[6] << BYTE_1) & MASK_1 ) | 
	    ( (msg_string[7] << BYTE_2) & MASK_2 ) |
	    ( (msg_string[8] << BYTE_3) & MASK_3 ) | 
	    ( (msg_string[9] << BYTE_4) & MASK_4 );

    memcpy(data, &msg_string[10], msg_len-10);

    memcpy (type_aux, msg_string, 2);
    bcd2ascii(type_aux, 2);

	memset(szCodiProc, 0, sizeof(szCodiProc));
	memcpy(szCodiProc, GetField(3), 6);
	lCodiProc = atol(szCodiProc);

	/* Pago de resumen */
	lCodiProc = (lCodiProc==OPCODE_VISA_PAGO_RESUMEN)    ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_DEVO_RESUMEN)    ? OPCODE_VISA_DEVOL      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUP_RESUMEN)    ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUD_RESUMEN)    ? OPCODE_VISA_ANUL_DEVOL : lCodiProc;

	lCodiProc = (lCodiProc==OPCODE_VISA_VTA_CA_P)        ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_VTA_CC_P)        ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_VTA_CA_D)        ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_VTA_CC_D)        ? OPCODE_VISA_VENTA      : lCodiProc;

	lCodiProc = (lCodiProc==OPCODE_VISA_DEV_CA_P)        ? OPCODE_VISA_DEVOL      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_DEV_CC_P)        ? OPCODE_VISA_DEVOL      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_DEV_CA_D)        ? OPCODE_VISA_DEVOL      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_DEV_CC_D)        ? OPCODE_VISA_DEVOL      : lCodiProc;
	
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_VTA_CA_P)   ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_VTA_CC_P)   ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_VTA_CA_D)   ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_VTA_CC_D)   ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_DEV_CA_P)   ? OPCODE_VISA_ANUL_DEVOL : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_DEV_CC_P)   ? OPCODE_VISA_ANUL_DEVOL : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_DEV_CA_D)   ? OPCODE_VISA_ANUL_DEVOL : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_VISA_ANUL_DEV_CC_D)   ? OPCODE_VISA_ANUL_DEVOL : lCodiProc;

	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_VTA_CA_P)   ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_VTA_CC_P)   ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_VTA_CA_D)   ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_VTA_CC_D)   ? OPCODE_VISA_VENTA      : lCodiProc;

	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_ANU_CA_P)  ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_ANU_CC_P)  ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_ANU_CA_D)  ? OPCODE_VISA_ANUL_VENTA : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_POS_ANU_CC_D)  ? OPCODE_VISA_ANUL_VENTA : lCodiProc;

	lCodiProc = (lCodiProc==OPCODE_CASHB_VISA_VENTA_P)  ? OPCODE_VISA_VENTA      : lCodiProc;
	lCodiProc = (lCodiProc==OPCODE_CASHB_VISA_ANULA_P)  ? OPCODE_VISA_ANUL_VENTA : lCodiProc;

	switch (atoi(type_aux))
    {
	case TYPE_VISA_VENTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_VENTA;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_DEVOL;
		    break;
		case  OPCODE_VISA_ANUL_VENTA:   
		    type=TYPE_VISA_ANUL_VENTA;
		    break;
		case OPCODE_VISA_ANUL_DEVOL: 
		    type=TYPE_VISA_ANUL_DEVOL;
		    break;
	    }
	    break;
	case TYPE_VISA_VENTA_LOCAL/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_VENTA_LOCAL;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_DEVOL_LOCAL;
		    break;
		case  OPCODE_VISA_ANUL_VENTA:  
		    type=TYPE_VISA_ANUL_VENTA_LOCAL;
		    break;
		case OPCODE_VISA_ANUL_DEVOL:  
		    type=TYPE_VISA_ANUL_DEVOL_LOCAL;
		    break;
	    }
	    break;
	case TYPE_VISA_REV_VENTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_REV_VENTA;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_REV_DEVOL;
		    break;
		case  OPCODE_VISA_ANUL_VENTA:  
		    type=TYPE_VISA_REV_ANUL_VENTA;
		    break;
		case OPCODE_VISA_ANUL_DEVOL:  
		    type=TYPE_VISA_REV_ANUL_DEVOL;
		    break;
	    }
	    break;
	case TYPE_VISA_VENTA_RTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_VENTA_RTA;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_DEVOL_RTA;
		    break; 
		case OPCODE_VISA_ANUL_VENTA: 
		    type=TYPE_VISA_ANUL_VENTA_RTA;
		    break;
		case OPCODE_VISA_ANUL_DEVOL:
		    type=TYPE_VISA_ANUL_DEVOL_RTA;
		    break;
	    }
            break;
	case TYPE_VISA_VENTA_LOCAL_RTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_VENTA_LOCAL_RTA;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_DEVOL_LOCAL_RTA;
		    break;
		case OPCODE_VISA_ANUL_VENTA:
		    type=TYPE_VISA_ANUL_VENTA_LOCAL_RTA;
		    break;
		case OPCODE_VISA_ANUL_DEVOL:
		    type=TYPE_VISA_ANUL_DEVOL_LOCAL_RTA;
		    break;
	    }
            break;
	case TYPE_VISA_REV_VENTA_RTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA: 
		    type=TYPE_VISA_REV_VENTA_RTA;
		    break;
		case OPCODE_VISA_DEVOL: 
		    type=TYPE_VISA_REV_DEVOL_RTA;
		    break;
		case  OPCODE_VISA_ANUL_VENTA: 
		    type=TYPE_VISA_REV_ANUL_VENTA_RTA;
		    break;
		case OPCODE_VISA_ANUL_DEVOL: 
		    type=TYPE_VISA_REV_ANUL_DEVOL_RTA;
		    break;
	    }
	    break;
	case TYPE_VISA_CIERRE/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_CIERRE: 
		    type=TYPE_VISA_CIERRE;
		    break;
		case OPCODE_VISA_CIERRE_B: 
		    type=TYPE_VISA_CIERRE_B;
		    break;
	    }
	    break;
	case TYPE_VISA_CIERRE_RTA/10:
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_CIERRE: 
		    type=TYPE_VISA_CIERRE_RTA;
		    break;
		case OPCODE_VISA_CIERRE_B: 
		    type=TYPE_VISA_CIERRE_B_RTA;
		    break;
	    }
	    break;
	case TYPE_VISA_BATCH/10:
	    type=TYPE_VISA_BATCH;
	    break;
	case TYPE_VISA_BATCH_RTA/10:
	    type=TYPE_VISA_BATCH_RTA;
	    break;
	case TYPE_VISA_TEST/10:
            type=TYPE_VISA_TEST;
	    break;
	case TYPE_VISA_TEST_RTA/10:
	    type=TYPE_VISA_TEST_RTA;
	    break;
	}

	PutField(3, szCodiProc);
}
/****************************/
int	Iso_Msg::ChkField(int nro)
{	// TRUE si esta, FALSE en caso contrario.
	if (nro>32)
		return ((bitmap2 & getbit(nro-32))==getbit(nro-32));
	else
		return ((bitmap1 & getbit(nro))==getbit(nro));
}
/*********************/
int Iso_Msg::ChkReady()
{	// Verifica si estan todos los campo mandatorios del mensaje. 
	int	cont=0;
	while ((fields_mask[cont].type!=type) && (fields_mask[cont].type!=0))
		cont++;
	if (fields_mask[cont].type==0)
		return -1;
	char aux_str[80];
	return (((fields_mask[cont].min1 & bitmap1)==fields_mask[cont].min1) &&
			((fields_mask[cont].min2 & bitmap2)==fields_mask[cont].min2));
}
/****************************/
int Iso_Msg::ChkValid(int nro)
{	// Verifica si el campo especificado es valido para ese mensaje
	int	cont=0;
	while ((fields_mask[cont].type!=type) && (fields_mask[cont].type!=0))
		cont++;
	if (fields_mask[cont].type==0)
		return -1;
	if (nro>32)
		return ((fields_mask[cont].max2 & getbit(nro-32))==getbit(nro-32));
	else
		return ((fields_mask[cont].max1 & getbit(nro))==getbit(nro));
}
/*****************************/
int Iso_Msg::GetFormat(int nro)
{	// Devuelve el tipo de campo (ASCII, BCD)
	int	cont=0;

	while (iso_fields[cont].bit!=0)
	{
		if (iso_fields[cont].bit==nro)
			return iso_fields[cont].format;
		cont++;
	}
	return FALSE;
}
/***************************/
int Iso_Msg::GetType(int nro)
{	// Devuelve el tipo de campo LVAR (largo variable) LFIX (fijo)
	int	cont=0;

	while (iso_fields[cont].bit!=0)
	{
		if (iso_fields[cont].bit==nro)
			return iso_fields[cont].type;
		cont++;
	}
	return FALSE;
}
/**************************/
int Iso_Msg::GetLen(int nro)
{	// Devuelve largo del campo o cant.digitos si es campo variable
	int	cont=0;

	while (iso_fields[cont].bit!=0)
	{
		if (iso_fields[cont].bit==nro)
			return iso_fields[cont].len;
		cont++;
	}
	return FALSE;
}
/*******************************/
int Iso_Msg::GetFieldOfs(int nro)
{	/* Devuelve el offset del campo dentro del mensaje o -1 si error */
    int		offset=0;
    int		cont;
    char	aux_str[128];
    int		aux_len;
	int		iFormat;

    if (!ChkField(nro))
		return -1;

    for (cont=0; cont<nro; cont++)
    {
		if (ChkField(cont))
		{
			if (GetType(cont)==LVAR)
			{
				aux_len=GetLen(cont)/2+GetLen(cont)%2;
				memset(aux_str, 0, sizeof(aux_str));
				memcpy(aux_str, &data[offset], aux_len);
				bcd2ascii(aux_str, aux_len);
				iFormat = GetFormat(cont);
				if ( (iFormat==TBCD) || (iFormat==FBCD) )
					offset+=atoi(aux_str)/2+atoi(aux_str)%2;
				else
					offset+=atoi(aux_str);
				offset+=aux_len;
			}
			else
			{
				iFormat = GetFormat(cont);
				if ( (iFormat==TBCD) || (iFormat==FBCD) )
					offset+=GetLen(cont)/2+GetLen(cont)%2;
				else
					offset+=GetLen(cont);
			}
		}
    }
    return offset;
}
/***********************************/
int Iso_Msg::GetNextFieldOfs(int nro)
{	/* Devuelve el offset del campo siguiente al especificado dentro del mensaje */
	int	cont;
	for (cont=nro+1; cont<64; cont++)
	{
		if (ChkField(cont))
			return GetFieldOfs(cont);
	}
	return data_len;
}
/********************************************************************
|  Funcion     : PutField()                                         |
|-------------------------------------------------------------------|
|  Descripcion : Agrega o modifica el campo especificado al mensaje.|
|								                                    |
|          +---- HHHHHH (nuevos datos)				                |
|          v							                            |
|  xxxxxxxxZZZZZZZyyyyyyyy					                        |
|								                                    |
|          	1. Offset inicio nuevos datos.		    	            |
|               2. Longitud de Z.				                    |
|               3. Longitud de H.			                        |
|               4. Longitud real de los datos.			            |
|                						                            |
|  A. Mov desde la possicion (1+2) (4-(1+2)) bytes a buf. temporal. |
|  B. Insertar en la posicion (1) (3) bytes (datos nuevos).         |
|  C. Mov del buf. temporal a la pos. (1+3) (4-(1+2)) bytes.	    |
********************************************************************/
int Iso_Msg::PutField(int nro, char *new_data_str)
{
    int		new_data_ofs=0;
    int		new_data_len=0;
    int		old_data_len=0;
    int		aux_len;
    int		cont;
    char	aux_str[128];
    char	temp[1000]={0};
    char	*new_data;
	int		iFormat;
	int		iRelleno;

    if (!ChkValid(nro))
		return -1;

    /* Copio new_data_str a new_data ya que lo vamos a modificar */
    aux_len=GetLen(nro);
    if (GetType(nro)==LVAR)
    {
		memcpy(aux_str, new_data_str, aux_len);
		aux_str[aux_len]=0;
		new_data_len+=atoi(aux_str);
    }
    new_data_len+=aux_len;
    new_data=(char *)malloc(new_data_len+1);
    memset(new_data, 0, new_data_len+1);
    memcpy(new_data, new_data_str, new_data_len);
    new_data_len=0;

    /* Obtengo el largo que va a ocupar el dato en el area de datos */
    if (GetType(nro)==LVAR)
    {
		aux_len=GetLen(nro)/2+GetLen(nro)%2;
		memcpy(aux_str, new_data, GetLen(nro));
		aux_str[GetLen(nro)]=0;
		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
			new_data_len+=atoi(aux_str)/2+atoi(aux_str)%2;
		else
			new_data_len+=atoi(aux_str);
		new_data_len+=aux_len;
    }
    else
    {
		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
			new_data_len+=GetLen(nro)/2+GetLen(nro)%2;
		else
			new_data_len+=GetLen(nro);
    }

    /* Obtengo el largo que ocupaba el valor anterior */
    if (ChkField(nro)==FALSE)
    {
		new_data_ofs=GetNextFieldOfs(nro);
		old_data_len=0;
    }
    else
    {
		new_data_ofs=GetFieldOfs(nro);
		if (GetType(nro)==LVAR)
		{
			aux_len=GetLen(nro)/2+GetLen(nro)%2;
			memcpy(aux_str, &data[new_data_ofs], aux_len);
			bcd2ascii(aux_str, aux_len);
			iFormat = GetFormat(nro);
			if ( (iFormat==TBCD) || (iFormat==FBCD) )
				old_data_len+=atoi(aux_str)/2+atoi(aux_str)%2;
			else
				old_data_len+=atoi(aux_str);
			old_data_len+=aux_len;
		}
		else
		{
			iFormat = GetFormat(nro);
			if ( (iFormat==TBCD) || (iFormat==FBCD) )
				old_data_len+=GetLen(nro)/2+GetLen(nro)%2;
			else
				old_data_len+=GetLen(nro);
		}
    }

    /* Si es necesario convierto los datos a formato BCD */
    if (GetType(nro)==LVAR)
    {
		aux_len=GetLen(nro)/2+GetLen(nro)%2;
		memcpy(aux_str, new_data, GetLen(nro));
		aux_str[GetLen(nro)]=0;
		ascii2bcd(new_data, GetLen(nro));
		for (cont=0; cont<atoi(aux_str); cont++)
		new_data[aux_len+cont]=new_data[GetLen(nro)+cont];
		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
		{
			switch (DBTipoProtocoloISO(szNroCA))
			{
			case PROT_ISO_AMEX:
				iRelleno = 1;
				break;
			default:
				iRelleno = 0;
				break;
			}		
			ascii2bcd_2(&new_data[aux_len], atoi(aux_str), iRelleno);
		}
    }
    else
    {
		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
			ascii2bcd(new_data, GetLen(nro));
    }

    memcpy(temp, &data[new_data_ofs+old_data_len],
	data_len-(new_data_ofs+old_data_len));
    memset(&data[new_data_ofs], 0, data_len-new_data_ofs);
    memcpy(&data[new_data_ofs], new_data, new_data_len);
    memcpy(&data[new_data_ofs+new_data_len], temp,
	data_len-(new_data_ofs+old_data_len));

    data_len+=new_data_len-old_data_len;

    if (nro>32)
		bitmap2=bitmap2|getbit(nro-32);
    else
		bitmap1=bitmap1|getbit(nro);

    free(new_data);
    return 0;
}
/******************************/
char *Iso_Msg::GetField(int nro)
{	// Devuelve un puntero a un string conteniendo los datos del campo, o NULL.
    static char	field_data[1003];
    int		offset;
    int		aux_len;
    int		len=0;
    int		cont;
	int		iFormat;
    
    if (!ChkField(nro))
		return NULL;

    memset(field_data, 0, sizeof(field_data));
    offset=GetFieldOfs(nro);
    if (GetType(nro)==LVAR)
    {
		aux_len=GetLen(nro)/2+GetLen(nro)%2;
		memcpy(field_data, &data[offset], aux_len);
		bcd2ascii(field_data, aux_len);
		if (GetLen(nro)%2!=0)
			for (cont=0; cont<GetLen(nro); cont++)
				field_data[cont]=field_data[cont+1];
		field_data[GetLen(nro)]=0;
		len=atoi(field_data);

		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
		{
			memcpy(&field_data[GetLen(nro)], &data[offset+aux_len], 
			len/2+len%2);
			bcd2ascii(&field_data[GetLen(nro)], len/2+len%2);
			if (GetLen(nro)%2!=0)
				for (cont=0; cont<len; cont++)
					field_data[GetLen(nro)+cont]=field_data[GetLen(nro)+cont+1];
			field_data[GetLen(nro)+len]=0;
		}
		else
		{
			memcpy(&field_data[GetLen(nro)], &data[offset+aux_len], len);
			field_data[GetLen(nro)+len]=0;
		}
    }
    else
    {
		iFormat = GetFormat(nro);
		if ( (iFormat==TBCD) || (iFormat==FBCD) )
		{
			aux_len=GetLen(nro)/2+GetLen(nro)%2;
			memcpy(field_data, &data[offset], aux_len);
			bcd2ascii(field_data, aux_len);
			if (GetLen(nro)%2!=0)
	    		for (cont=0; cont<GetLen(nro); cont++)
					field_data[cont]=field_data[cont+1];
			field_data[GetLen(nro)]=0;
		}
		else
		{
			memcpy(field_data, &data[offset], GetLen(nro));
			field_data[GetLen(nro)]=0;
		}
    }
    return field_data;
}
/***********************/
int Iso_Msg::GetMsgType()
{
	return type;
}
/***********************/
void Iso_Msg::SetMsgType(int iTipo)
{
	type = iTipo;
}
/*****************************************/
int Iso_Msg::GetMsgString(char *msg_string)
{	// Devuelve puntero a string conteniendo mensaje armado, o NULL
	char	aux_str[5];
	int		tot_len=0;
	int		len;

    sprintf(aux_str, "%04d", type/10);
	len=ascii2bcd(aux_str, strlen(aux_str));
    memcpy(&msg_string[tot_len], aux_str, len);
    tot_len=len;

    msg_string[2]=(bitmap1 & MASK_1 ) >> BYTE_1;
    msg_string[3]=(bitmap1 & MASK_2 ) >> BYTE_2;
    msg_string[4]=(bitmap1 & MASK_3 ) >> BYTE_3;
    msg_string[5]=(bitmap1 & MASK_4 ) >> BYTE_4;
    msg_string[6]=(bitmap2 & MASK_1 ) >> BYTE_1;
    msg_string[7]=(bitmap2 & MASK_2 ) >> BYTE_2;
    msg_string[8]=(bitmap2 & MASK_3 ) >> BYTE_3;
    msg_string[9]=(bitmap2 & MASK_4 ) >> BYTE_4;

    tot_len+=sizeof(bitmap1);
    tot_len+=sizeof(bitmap2);
    memcpy(&msg_string[tot_len], data, data_len);
    tot_len+=data_len;
	return tot_len;
}
/******************/
int Iso_Msg::Aprob()
{
	int iRet=NOOK;
	char szRtaCA[3];
	char szRtaTPV[3];

	memset(szRtaCA, 0, sizeof(szRtaCA));
	sprintf(szRtaCA, GetField(39));
	szRtaCA[2] = 0;
	
	iRet = piObtStoreRta(szNroCA, szRtaCA, szRtaTPV);
	if (iRet==1)
	{
		iRet = OK;
	}
	else
	{
		iRet = NOOK;
	}
	return iRet;
}
/***************************/
Iso_Msg::operator Price_Msg()
{
    Price_Msg	price_msg;
    char 		aux_str[100];
	long		lCodiProc;
	char		szRtaTPV[3];
	char		szRtaCA[3];

	lCodiProc = atol(GetField(3));

	memset(szRtaCA, 0, sizeof(szRtaCA));
	sprintf(szRtaCA, GetField(39));
	szRtaCA[2] = 0;

	piObtStoreRta(szNroCA, szRtaCA, szRtaTPV);
	
    switch (type)
    {
	case TYPE_VISA_VENTA_RTA:
	case TYPE_VISA_DEVOL_RTA:

	    price_msg=Price_Msg(TYPE_PRICE_VENTA_RTA);
	    price_msg.PutField(6, szRtaTPV); 
	    strcpy(aux_str, GetField(2));
	    while (strlen(aux_str)<21)
			strcat(aux_str, " ");
	    price_msg.PutField(7, aux_str+2);
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA:
		    price_msg.PutField(8, "01");
		    break;
		case OPCODE_VISA_DEVOL:
		    price_msg.PutField(8, "02");
		    break;
	    }
	    price_msg.PutField(9, GetField(38));
	    price_msg.PutField(10, GetField(37)+6);    /* 12 digitos a 6 (!) */
	    price_msg.PutField(11, GetField(42));
	    break;
	case TYPE_VISA_VENTA_LOCAL_RTA:
	case TYPE_VISA_DEVOL_LOCAL_RTA:
	    price_msg=Price_Msg(TYPE_PRICE_VENTA_LOCAL_RTA);
	    price_msg.PutField(6, szRtaTPV); 
	    price_msg.PutField(7, GetField(37)+6);    /* 12 digitos a 6 (!) */
	    strcpy(aux_str, GetField(2));
	    while (strlen(aux_str)<21)
			strcat(aux_str, " ");
	    price_msg.PutField(8, aux_str+2);
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA:
		    price_msg.PutField(9, "01");
		    break;
		case OPCODE_VISA_DEVOL:
		    price_msg.PutField(9, "02");
		    break;
	    }
	    price_msg.PutField(10, GetField(42));
	    break;
	case TYPE_VISA_ANUL_VENTA_RTA:
	case TYPE_VISA_ANUL_DEVOL_RTA:
	    price_msg=Price_Msg(TYPE_PRICE_ANUL_VENTA_RTA);
	    price_msg.PutField(6, szRtaTPV); 
	    price_msg.PutField(7, GetField(37)+6);    /* 12 digitos a 6 (!) */
	    strcpy(aux_str, GetField(2));
	    while (strlen(aux_str)<21)
			strcat(aux_str, " ");
	    price_msg.PutField(8, aux_str+2);
	    switch (lCodiProc)
	    {
		case OPCODE_VISA_VENTA:
		    price_msg.PutField(9, "01");
		    break;
		case OPCODE_VISA_DEVOL:
		    price_msg.PutField(9, "02");
		    break;
	    }
	    price_msg.PutField(10, GetField(42));
	    break;
    }
    return price_msg;
}
/*******************************************/
int Iso_Msg::GetDBData(BatchData& batch_data)
{
    switch(type)
    {
	case TYPE_VISA_CIERRE:
	case TYPE_VISA_CIERRE_B:
	    char	aux_str[100];
	    char	aux_str1[4];
	    char	aux_str2[5];
	    char	aux_str3[13];
	    char	aux_str4[5];
	    char	aux_str5[13];
	    char	aux_str6[5];
	    char	aux_str7[13];
		/* Pago de resumen */
	    char	aux_str8[5];
	    char	aux_str9[13];
	    char	aux_str10[5];
	    char	aux_str11[13];
	    char	aux_str12[5];
	    char	aux_str13[13];

	    batch_data.NroTrc(GetField(11));
	    strcpy(aux_str, GetField(63));
		if (strlen(aux_str)<=51)	/* Pago de resumen */ 	
		{
			sscanf(aux_str, "%*3s%3s%4s%12s%4s%12s%4s%12s", aux_str1,
			aux_str2, aux_str3, aux_str4, aux_str5, aux_str6, aux_str7);
		}
		else	/* Pago de resumen */
		{
			sscanf(aux_str, "%*3s%3s%4s%12s%4s%12s%4s%12s%4s%12s%4s%12s%4s%12s", aux_str1,
			aux_str2, aux_str3, aux_str4, aux_str5, aux_str6, aux_str7,
			aux_str8, aux_str9, aux_str10, aux_str11, aux_str12, aux_str13);
		}
	    batch_data.NroLot(aux_str1);
	    batch_data.CanVen(aux_str2);
	    batch_data.MonVen(aux_str3);
	    batch_data.CanDev(aux_str4);
	    batch_data.MonDev(aux_str5);
	    batch_data.CanAnu(aux_str6);
	    batch_data.MonAnu(aux_str7);
		/* Pago de resumen */
	    batch_data.CanPag(aux_str8);
	    batch_data.MonPag(aux_str9);
	    batch_data.CanDep(aux_str10);
	    batch_data.MonDep(aux_str11);
	    batch_data.CanAnp(aux_str12);
	    batch_data.MonAnp(aux_str13);

	    batch_data.FecEnv(GetField(7));
	    return OK;
	case TYPE_VISA_CIERRE_RTA:
	case TYPE_VISA_CIERRE_B_RTA:
	    batch_data.NroTrc(GetField(11));
	    batch_data.NroRef(GetField(37));
	    batch_data.CodAut(GetField(38));
	    batch_data.CodRta(GetField(39));
	    return OK;
	default:
	    return NOOK;
    }
}
/***************************************/
int Iso_Msg::GetDBData(TrxData& trx_data)
{
    switch(type)
    {
	case TYPE_VISA_VENTA:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("00");
	    trx_data.ModEnv("00");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_DEVOL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("02");
	    trx_data.ModEnv("00");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_ANUL_VENTA:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("01");
	    trx_data.ModEnv("00");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_ANUL_DEVOL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("01");
	    trx_data.ModEnv("00");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_VENTA_LOCAL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("00");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_DEVOL_LOCAL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("02");
	    trx_data.ModEnv("01");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_ANUL_VENTA_LOCAL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("01");
	    trx_data.ModEnv("01");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_ANUL_DEVOL_LOCAL:
	    trx_data.NroTrc(GetField(11));
	    trx_data.ModIng(GetField(22));
	    trx_data.FecEnv(GetField(7));
	    trx_data.CodTrx("01");
	    trx_data.ModEnv("01");
	    trx_data.CodPro(GetField(3));
	    break;
	case TYPE_VISA_TEST:
	case TYPE_VISA_VENTA_RTA:
	case TYPE_VISA_DEVOL_RTA:
	case TYPE_VISA_ANUL_VENTA_RTA:
	case TYPE_VISA_ANUL_DEVOL_RTA:
	case TYPE_VISA_VENTA_LOCAL_RTA:
	case TYPE_VISA_DEVOL_LOCAL_RTA:
	case TYPE_VISA_ANUL_VENTA_LOCAL_RTA:
	case TYPE_VISA_ANUL_DEVOL_LOCAL_RTA:
	    trx_data.NroTrc(GetField(11));
	    trx_data.NroRef(GetField(37));
	    trx_data.CodAut(GetField(38));
	    trx_data.CodRta(GetField(39));
	case TYPE_VISA_TEST_RTA:
	default:
	    break;
    }
    return NOOK;
}
/***************************************/
void Iso_Msg::SetNroCA8583(char *szParamCA)
{
	memset(szNroCA, 0, sizeof(szNroCA));
	memcpy(szNroCA, szParamCA, sizeof(szNroCA)-1);
}
/******************************/
int Iso_Msg::EsAnulacionPinpad()
{
	long lCodiProc;
	char szCodiProc[7];
	memset(szCodiProc, 0, sizeof(szCodiProc));
	memcpy(szCodiProc, GetField(3), 6);
	lCodiProc = atol(szCodiProc);
	if (    (lCodiProc == OPCODE_CASHB_POS_ANU_CA_P)
		 || (lCodiProc == OPCODE_CASHB_POS_ANU_CC_P)
		 || (lCodiProc == OPCODE_CASHB_POS_ANU_CA_D)
		 || (lCodiProc == OPCODE_CASHB_POS_ANU_CC_D)
		 || (lCodiProc == OPCODE_VISA_ANUL_VTA_CA_P)
		 ||	(lCodiProc == OPCODE_VISA_ANUL_VTA_CC_P)
		 || (lCodiProc == OPCODE_VISA_ANUL_VTA_CA_D)
		 || (lCodiProc == OPCODE_VISA_ANUL_VTA_CC_D)   )
	{
		return 1;
	}
	return 0;
}
