/*
+------------------------------------------------------------------------------+
|           COTO - PLATAFORMAS SECTORIALES - DESARROLLO DISTRIBUCION           |
|              Copyright (C) 2003 - COTO CICSA                                 |
+-----------------+------------------------------------------------------------+
| FUENTE          | abierto.pc                                                 |
|                 |                                                            |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Proceso para obtener la cantidad de transacciones que se   |
|                 | encuentran pendientes de cierre                            |
+-----------------+------------------------------------------------------------+
*/
#define OK    0
#define NOOK  -1

extern int	SqlErrno;

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR		userid[20];
    VARCHAR     descrip[30];
    VARCHAR     nro_ca[2];
    VARCHAR     fecha[4];
EXEC SQL END DECLARE SECTION;

/*
+-----------------+------------------------------------------------------------+
| FUENTE          | open_db                                                    |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Funcion de conexion a la base de datos                     |
|                 |                                                            | 
+-----------------+------------------------------------------------------------+
*/
int open_db()
{
	int SqlErrno;

    strcpy((char *)userid.arr, "/");
    userid.len=strlen(userid.arr);

    EXEC SQL
		CONNECT :userid;
		
    if (sqlca.sqlcode!=OK)
	{
		SqlErrno=sqlca.sqlcode;
		printf("Error al conectarse a la Base de Datos\n");
		printf("Error [%d]\n",SqlErrno);
		return NOOK;
	}
    SqlErrno=OK;
    return OK;
}
/*
+-----------------+------------------------------------------------------------+
| FUENTE          | main                                                       |
+-----------------+------------------------------------------------------------+
| DESCRIPCION     | Funcion principal de la aplicacion                         |
|                 |                                                            | 
+-----------------+------------------------------------------------------------+
*/
void main(int argc,char *argv[])
{

	int cont;
	long monto;


	/* Verifica correccion en parametros */
	if (argc<2)
	{
		printf("Uso: %s <mmdd>\n", argv[0]);
		exit(0);
	}

	/* Abre base de datos */
	open_db();

	/* Copia el parametro a la estructura fecha */
	strcpy((char *)fecha.arr,argv[1]);
	fecha.len=strlen((char *)fecha.arr);

	/* Declara cursor sobre los centros autorizadores */
    EXEC SQL
        DECLARE cursor_ca CURSOR FOR
           SELECT nro_ca, descrip
           FROM cred_cas;
        
    /* Abre el cursor de centros autorizadores */
	EXEC SQL
        OPEN cursor_ca;

    /* Recupera un centro */
	EXEC SQL 
        FETCH cursor_ca
        INTO :nro_ca, :descrip;

    /* Repite mientras hay centros para procesar */
	while (sqlca.sqlcode==0)
    {
		/* Inicializa las variables */
		cont = 0;
		monto = 0;

		/* Consulta la cantidad de transacciones aprobadas y sin cerrar */    
        EXEC SQL
            SELECT count(*), sum(decode(cod_trx,'00', monto, -monto))
            INTO :cont, :monto
            FROM cred_trx
            WHERE nro_ca=:nro_ca 
              AND cod_est='02'
              AND substr(fec_loc,1,4)=:fecha;

		/* Imprime la cantidad de transacciones */
         printf("\t%.15s Trx abiertas  %8d    por %10.2lf\n", descrip.arr, cont,(long double)monto/100);

         /* Recupera otro centro */
		 EXEC SQL 
             FETCH cursor_ca
             INTO :nro_ca, :descrip;
    }
         
	/* Imprime linea final */
	printf("\n");
	
	/* Cierra el cursor */
	EXEC SQL
		CLOSE cursor_ca;
 
}
